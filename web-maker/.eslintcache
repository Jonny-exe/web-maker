[{"/home/a/Documents/GitHub/web-maker/web-maker/src/index.tsx":"1","/home/a/Documents/GitHub/web-maker/web-maker/src/reportWebVitals.ts":"2","/home/a/Documents/GitHub/web-maker/web-maker/src/App.tsx":"3","/home/a/Documents/GitHub/web-maker/web-maker/src/AddButton.tsx":"4","/home/a/Documents/GitHub/web-maker/web-maker/src/Modal.tsx":"5","/home/a/Documents/GitHub/web-maker/web-maker/src/Preview.tsx":"6","/home/a/Documents/GitHub/web-maker/web-maker/src/Edit.tsx":"7","/home/a/Documents/GitHub/web-maker/web-maker/src/RenderContent.tsx":"8","/home/a/Documents/GitHub/web-maker/web-maker/src/DropdownItems.tsx":"9","/home/a/Documents/GitHub/web-maker/web-maker/src/ModalImage.tsx":"10","/home/a/Documents/GitHub/web-maker/web-maker/src/StylesTextAlign.tsx":"11","/home/a/Documents/GitHub/web-maker/web-maker/src/StylesToggle.tsx":"12","/home/a/Documents/GitHub/web-maker/web-maker/src/RenderContent1.tsx":"13","/home/a/Documents/GitHub/web-maker/web-maker/src/AddItem.tsx":"14","/home/a/Documents/GitHub/web-maker/web-maker/src/AddImage.tsx":"15","/home/a/Documents/GitHub/web-maker/web-maker/src/ModalImageSizeTable.tsx":"16","/home/a/Documents/GitHub/web-maker/web-maker/src/TextAlignCheckbox.tsx":"17","/home/a/Documents/GitHub/web-maker/web-maker/src/defaultTypes.js":"18","/home/a/Documents/GitHub/web-maker/web-maker/src/Login.tsx":"19","/home/a/Documents/GitHub/web-maker/web-maker/src/ModalLogin.tsx":"20","/home/a/Documents/GitHub/web-maker/web-maker/src/requests.tsx":"21","/home/a/Documents/GitHub/web-maker/web-maker/src/ModalTable.tsx":"22","/home/a/Documents/GitHub/web-maker/web-maker/src/AddTable.tsx":"23","/home/a/Documents/GitHub/web-maker/web-maker/src/Alerts.tsx":"24","/home/a/Documents/GitHub/web-maker/web-maker/src/AddTextCollumn.tsx":"25","/home/a/Documents/GitHub/web-maker/web-maker/src/AppMain.tsx":"26","/home/a/Documents/GitHub/web-maker/web-maker/src/AppLandingPage.tsx":"27"},{"size":500,"mtime":1608888503576,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":1608888503576,"results":"30","hashOfConfig":"29"},{"size":448,"mtime":1609501302306,"results":"31","hashOfConfig":"29"},{"size":2526,"mtime":1609443347577,"results":"32","hashOfConfig":"29"},{"size":828,"mtime":1609436173480,"results":"33","hashOfConfig":"29"},{"size":445,"mtime":1608901941439,"results":"34","hashOfConfig":"29"},{"size":367,"mtime":1609325448503,"results":"35","hashOfConfig":"29"},{"size":1565,"mtime":1609443139668,"results":"36","hashOfConfig":"29"},{"size":2278,"mtime":1609443273177,"results":"37","hashOfConfig":"29"},{"size":1420,"mtime":1609437235548,"results":"38","hashOfConfig":"29"},{"size":1194,"mtime":1608888503576,"results":"39","hashOfConfig":"29"},{"size":946,"mtime":1609433147278,"results":"40","hashOfConfig":"29"},{"size":1421,"mtime":1609412613234,"results":"41","hashOfConfig":"29"},{"size":683,"mtime":1609439347340,"results":"42","hashOfConfig":"29"},{"size":1234,"mtime":1609493191386,"results":"43","hashOfConfig":"29"},{"size":1248,"mtime":1609327679861,"results":"44","hashOfConfig":"29"},{"size":804,"mtime":1608888503576,"results":"45","hashOfConfig":"29"},{"size":2046,"mtime":1609456833212,"results":"46","hashOfConfig":"29"},{"size":885,"mtime":1609436195312,"results":"47","hashOfConfig":"29"},{"size":12155,"mtime":1609436177720,"results":"48","hashOfConfig":"29"},{"size":7689,"mtime":1609425184088,"results":"49","hashOfConfig":"29"},{"size":1224,"mtime":1609436971080,"results":"50","hashOfConfig":"29"},{"size":1526,"mtime":1609436892136,"results":"51","hashOfConfig":"29"},{"size":616,"mtime":1609349244437,"results":"52","hashOfConfig":"29"},{"size":580,"mtime":1609436415401,"results":"53","hashOfConfig":"29"},{"size":3150,"mtime":1609497917846,"results":"54","hashOfConfig":"29"},{"size":957,"mtime":1609501265181,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"l7xcaf",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"58"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"58"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"58"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"58"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"58"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/a/Documents/GitHub/web-maker/web-maker/src/index.tsx",[],["135","136"],"/home/a/Documents/GitHub/web-maker/web-maker/src/reportWebVitals.ts",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/App.tsx",["137","138","139"],"/home/a/Documents/GitHub/web-maker/web-maker/src/AddButton.tsx",["140"],"import React, { useEffect, useState } from 'react';\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport DropdownItems from './DropdownItems'\nimport ModalImage from './ModalImage'\nimport ModalTable from './ModalTable'\n\n\n/* <FontAwesomeIcon icon={faPlusSquare} style={{ width: \"\" }} onClick={props.addToDivCount} className={props.previewMode ? \"previewMode\" : \"\"} /> */\nconst AddButton = (props: any) => {\n  const [imageSrc, setImageSrc] = useState(\"\")\n  const [menuState, setMenuState] = useState(false)\n  const [addImageOverlayActive, setAddImageOverlayActive] = useState(false)\n  const [addTableOverlayActive, setAddTableOverlayActive] = useState(false)\n  const [applyImageCount, setApplyImageCount] = useState(0)\n  const [applyTableCount, setApplyTableCount] = useState(0)\n  const [imageSizes, setImageSizes] = useState({ width: 1, height: 1, magnitude: \"\" })\n  const [tableSizes, setTableSizes] = useState({ width: 2, height: 2})\n\n  const handleClick = () => {\n    setMenuState(!menuState)\n  }\n\n  return (\n    <div className=\"addButtonContainer\">\n      <div className=\"\">\n        <FontAwesomeIcon size={\"2x\"} icon={faPlus} className={`addButton ${props.previewMode ? \"previewMode\" : \"\"}`} onClick={handleClick} />\n      </div>\n      <DropdownItems imageSrc={imageSrc} imageSizes={imageSizes} tableSizes={tableSizes} setApplyTableCount={setApplyTableCount} applyImageCount={applyImageCount} applyTableCount={applyTableCount} content={props.content} setContent={props.setContent} editCount={props.editCount} setEditCount={props.setEditCount} setAddImageOverlayActive={setAddImageOverlayActive} setAddTableOverlayActive={setAddTableOverlayActive} menuState={menuState} />\n      <div className={`overlay addButtonOverlay ${menuState ? \"overlayActive addButtonOverlayActive\" : \"\"}`} onClick={() => setMenuState(false)}></div>\n      <ModalImage imageSrc={imageSrc} setImageSrc={setImageSrc} imageSizes={imageSizes} setImageSizes={setImageSizes} setApplyImageCount={setApplyImageCount} applyCount={applyImageCount} addImageOverlayActive={addImageOverlayActive} setAddImageOverlayActive={setAddImageOverlayActive} setApplyTableCount={setApplyTableCount} />\n      <ModalTable tableSizes={tableSizes} setTableSizes={setTableSizes} setApplyTableCount={setApplyTableCount} applyTableCount={applyTableCount} addTableOverlayActive={addTableOverlayActive} setAddTableOverlayActive={setAddTableOverlayActive} />\n    </div>\n  );\n}\n\n\nexport default AddButton;\n","/home/a/Documents/GitHub/web-maker/web-maker/src/Modal.tsx",["141","142"],"import React, { useEffect, useState } from 'react'\nimport StylesTextAlign from './StylesTextAlign'\nimport StylesToggle from './StylesToggle'\n\nexport const Modal = (props: any) => {\n  return (\n    <div className=\"inputContainer\">\n      <div className={`editModal ${props.modalStateActive ? \"editModalActive\" : \"\"}`}>\n        <StylesToggle modalStateActive={props.modalStateActive} on=\"solid\" off=\"none\" setSavedStyle={props.setSavedStyle} savedStyle={props.savedStyle} propertyToToggle={\"borderStyle\"} nameOfStyle={\"Border\"} />\n        <StylesTextAlign savedStyle={props.savedStyle} modalStateActive={props.modalStateActive} />\n      </div>\n      <div className={`overlay editOverlay ${props.modalStateActive ? \"overlayActive\" : \"\"}`} onClick={() => props.setModalStateActive(false)}></div>\n    </div>\n  )\n}\n\nexport default Modal","/home/a/Documents/GitHub/web-maker/web-maker/src/Preview.tsx",["143"],"import React, {useState} from 'react';\n\nexport const Preveiw = (props: any) => {\n  return (\n    <div className=\"preview\">\n      <button className={`preview ${props.previewMode ? \"previewMode\" : \"\"}`} onClick={() => props.handlePreview(true)}> Preview </button>\n      <button className={`preview ${props.previewMode ? \"\" : \"previewMode\"}`} onClick={() => props.handlePreview(false)}> UnPreview </button>\n    </div>\n  );\n}\n\nexport default Preveiw\n","/home/a/Documents/GitHub/web-maker/web-maker/src/Edit.tsx",["144"],"import React, { useState } from 'react'\n\nexport const Edit = (props: any) => {\n\n\treturn (\n\t\t<div className=\"preview\">\n\t\t\t<button onClick={() => {\n\t\t\t\tprops.setModalStateActive(true)\n\t\t\t}} className={`preview ${props.previewMode ? \"previewMode\" : \"\"} ${props.displayButtons ? \"displayButtons\" : \"notDisplayButtons\"}`}> Edit </button>\n\t\t</div>\n\t)\n}\n\nexport default Edit",["145","146"],"/home/a/Documents/GitHub/web-maker/web-maker/src/RenderContent.tsx",["147","148","149","150","151","152","153"],"import React, { useEffect, useState } from 'react'\nimport RenderContent1 from './RenderContent1'\nimport App from \"./App\"\n\nexport const RenderContent = (props: any) => {\n\tconst [notEditable, setNotEditable] = useState([\"table\", \"tr\", \"div\"])\n\n\tconsole.log(\"Content: \", props.content)\n\treturn (\n\t\t<>\n\t\t\t{\n\t\t\t\tprops.content.map((x: any, i: number) => (\n\t\t\t\t\t// Images must be done separatly\n\t\t\t\t\tx.type == \"img\" ? <img style={x.style} src={x.src} alt=\"Image\"></img> :\n\t\t\t\t\t\tReact.createElement(x.type, {\n\t\t\t\t\t\t\tstyle: x.style,\n\t\t\t\t\t\t\tcontentEditable: notEditable.includes(x.type) || props.previewMode ? \"false\" : \"true\", // this is has to be like this because if not it doesnt detect the td only the table\n\t\t\t\t\t\t\tplaceholder: x.text,\n\t\t\t\t\t\t\tcontent: \"\",\n\t\t\t\t\t\t\tonClick: (e: any) => {\n\t\t\t\t\t\t\t\t// props.handleDiv(e.target.innerText, i, e) // this could be set to e.target.innerHTML to use \" text \"\n\t\t\t\t\t\t\t\tprops.setDisplayButtons(true)\n\t\t\t\t\t\t\t\t// props.savedStyle.borderStyle = \"\"\n\t\t\t\t\t\t\t\t// e.target.style.border = \"2px solid red\"\n\t\t\t\t\t\t\t\t// e.target.style.borderRadius = \"5px\"\n\t\t\t\t\t\t\t\tprops.setSavedStyle(e.target.style)\n\t\t\t\t\t\t\t\tconsole.log(x.style)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonInput: (e: any) => {\n\t\t\t\t\t\t\t\tx.content = e.target.textContent\n\t\t\t\t\t\t\t\tconsole.log(\"ONINPUT\")\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\tx.children != undefined && x.children.length != 0 ? <RenderContent1 content={x.children} setDisplayButtons={props.setDisplayButtons} setSavedStyle={props.setSavedStyle} savedStyle={props.savedStyle} /> : x.content,\n\t\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t)\n\t\t\t}\n\t\t</>\n\t)\n}\n\nexport default RenderContent","/home/a/Documents/GitHub/web-maker/web-maker/src/DropdownItems.tsx",["154"],"import React from 'react'\nimport DropdownItem from './DropdownItem'\nimport AddItem from './AddItem'\nimport AddImage from './AddImage'\nimport AddTable from './AddTable'\nimport AddTextCollumns from './AddTextCollumn'\nimport { faParagraph } from \"@fortawesome/free-solid-svg-icons\";\nimport { faHeading } from \"@fortawesome/free-solid-svg-icons\";\nimport { faImage } from \"@fortawesome/free-solid-svg-icons\";\nimport { faColumns } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTable } from \"@fortawesome/free-solid-svg-icons\";\n// import types from \"./types.js\"\n\nexport const DropdownItems = (props: any) => {\n\treturn (\n\t\t<div className={`dropdownMenuItems ${props.menuState ? \"showDropdownItems\" : \"notShowDropdownItems\"}`}>\n\t\t\t<AddItem type={\"h1\"} text={\"Title\"} content={props.content} size={1} icon={faHeading} setContent={props.setContent} editCount={props.editCount} setEditCount={props.setEditCount} />\n\t\t\t<AddItem type={\"h2\"} text={\"SubTitle\"} content={props.content} size={0.9} icon={faHeading} setContent={props.setContent} editCount={props.editCount} setEditCount={props.setEditCount} />\n\t\t\t<AddItem type={\"h3\"} text={\"Heading\"} content={props.content} size={0.8} icon={faHeading} setContent={props.setContent} editCount={props.editCount} setEditCount={props.setEditCount} />\n\t\t\t<AddItem type={\"p\"} text={\"Text\"} content={props.content} icon={faParagraph} setContent={props.setContent} editCount={props.editCount} setEditCount={props.setEditCount} />\n\t\t\t<AddImage type={\"img\"} text={\"Image\"} imageSizes={props.imageSizes} icon={faImage} src={props.imageSrc} applyImageCount={props.applyImageCount} content={props.content} setContent={props.setContent} editCount={props.editCount} setEditCount={props.setEditCount} setAddImageOverlayActive={props.setAddImageOverlayActive} />\n\t\t\t<AddTable type={\"table\"} text={\"Table\"} tableSizes={props.tableSizes} icon={faTable} applyTableCount={props.applyTableCount} setApplyTableCount={props.setApplyTableCount} content={props.content} setContent={props.setContent} editCount={props.editCount} setEditCount={props.setEditCount} setAddTableOverlayActive={props.setAddTableOverlayActive} />\n\t\t\t<AddTextCollumns content={props.content} setEditCount={props.setEditCount} icon={faColumns} />\n\t\t</div>\n\t)\n}\n\nexport default DropdownItems","/home/a/Documents/GitHub/web-maker/web-maker/src/ModalImage.tsx",["155","156"],"import React, { useEffect, useState } from 'react';\nimport ModalImageSizeTabel from './ModalImageSizeTable'\n\n\n/* <FontAwesomeIcon icon={faPlusSquare} style={{ width: \"\" }} onClick={props.addToDivCount} className={props.previewMode ? \"previewMode\" : \"\"} /> */\nconst ModalImage = (props: any) => {\n\treturn (\n\t\t<div className=\"imageModalContainer\">\n\t\t\t<div className={`overlay addImageOverlay ${props.addImageOverlayActive ? \"overlayActive addImageOverlayActive\" : \"\"}`} onClick={() => props.setAddImageOverlayActive(false)}></div>\n\t\t\t<div className={`addImageModal editModal ${props.addImageOverlayActive ? \"editModalActive\" : \"\"}`}>\n\t\t\t\t<h2 className=\"addImageModalHeader\" style={{margin: \"1%\"}}> Add your image url </h2>\n\t\t\t\t<input type=\"text\" className={`input ${props.previewMode ? \"previewMode\" : \"\"}`} value={props.imageSrc} placeholder=\"https:you-image-url\" onChange={(e: any) => props.setImageSrc(e.target.value)}  ></input>\n\t\t\t\t<div className=\"informationDiv\"> Select your image messurement, if you image is already good leave everything blank</div>\n\t\t\t\t<div className=\"imageModalSizeInputContainer\">\n\t\t\t\t\t<ModalImageSizeTabel imageSizes={props.imageSizes} />\n\t\t\t\t</div>\n\t\t\t\t<button className=\"preview addImageModalButton\" onClick={() => {\n\t\t\t\t\tprops.setAddImageOverlayActive(false)\n\t\t\t\t\tprops.setApplyImageCount(props.applyCount + 1)\n\t\t\t\t}}> Apply </button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n\nexport default ModalImage;\n","/home/a/Documents/GitHub/web-maker/web-maker/src/StylesTextAlign.tsx",["157"],"import React, { useState } from 'react'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAlignCenter, faAlignJustify, faAlignLeft, faAlignRight } from '@fortawesome/free-solid-svg-icons';\nimport TextAlignCheckbox from './TextAlignCheckbox'\n\nexport const StylesTextAlign = (props: any) => {\n  const [selected, setSelected] = useState(\"\")\n\n  return (\n    <div className=\"textAlignContainer\">\n      <TextAlignCheckbox selected={selected} setSelected={setSelected} savedStyle={props.savedStyle} icon={faAlignJustify} type={\"justify\"} modalStateActive={props.modalStateActive} />\n      <TextAlignCheckbox selected={selected} setSelected={setSelected} savedStyle={props.savedStyle} icon={faAlignCenter} type={\"center\"} modalStateActive={props.modalStateActive }/>\n      <TextAlignCheckbox selected={selected} setSelected={setSelected} savedStyle={props.savedStyle} icon={faAlignLeft} type={\"left\"} modalStateActive={props.modalStateActive} />\n      <TextAlignCheckbox selected={selected} setSelected={setSelected} savedStyle={props.savedStyle} icon={faAlignRight} type={\"right\"} modalStateActive={props.modalStateActive} />\n    </div>\n  )\n}\n\nexport default StylesTextAlign","/home/a/Documents/GitHub/web-maker/web-maker/src/StylesToggle.tsx",["158","159"],"import React, { useEffect, useState } from 'react'\n\nexport const StylesToggle = (props: any) => {\n\tconst [checkbox, setCheckbox] = useState(false)\n\n\tconst handleCheckbox = (event: any) => {\n\t\tif (event.target.checked) {\n\t\t\tprops.savedStyle[props.propertyToToggle] = props.on\n\t\t\tsetCheckbox(true)\n\t\t} else {\n\t\t\tprops.savedStyle[props.propertyToToggle] = props.off\n\t\t\tsetCheckbox(false)\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif (props.modalStateActive) {\n\t\t\tif (props.savedStyle[props.propertyToToggle] == props.on) {\n\t\t\t\tsetCheckbox(true)\n\t\t\t} else {\n\t\t\t\tsetCheckbox(false)\n\t\t\t}\n\t\t}\n\t}, [props.modalStateActive])\n\n\treturn (\n\t\t<div className=\"stylesBorderContainer\">\n\t\t\t<label className=\"checkboxContainer\">\n\t\t\t\t<input onClick={(e: any) => handleCheckbox(e)} type=\"checkbox\" checked={checkbox} className=\"checkbox\"></input>\n\t\t\t\t<div className=\"checkboxFill\"></div>\n\t\t\t</label>\n\t\t\t<span> {props.nameOfStyle} </span>\n\t\t</div>\n\t)\n}\n\nexport default StylesToggle","/home/a/Documents/GitHub/web-maker/web-maker/src/RenderContent1.tsx",["160","161","162","163","164","165","166","167"],"import React, { useState } from 'react'\nimport RenderContent from './RenderContent'\nimport App from \"./App\"\n\nexport const RenderContent1 = (props: any) => {\n\treturn (\n\t\t<>\n\t\t\t{console.log(props.content)}\n\t\t\t{\n\t\t\t\tprops.content.map((x: any, i: number) => (\n\t\t\t\t\t// Images must be done separatly\n\n\t\t\t\t\tx.type == \"img\" ? <img style={x.style} src={x.src} alt=\"Image\"></img> :\n\t\t\t\t\t\tReact.createElement(x.type, {\n\t\t\t\t\t\t\tstyle: x.style,\n\t\t\t\t\t\t\tcontentEditable: x.type != \"table\" && x.type != \"tr\" ? \"true\" : \"false\", // this is has to be like this because if not it doesnt detect the td only the table\n\t\t\t\t\t\t\tplaceholder: x.text,\n\t\t\t\t\t\t\tcontent: \"hi\",\n\t\t\t\t\t\t\tonClick: (e: any) => {\n\t\t\t\t\t\t\t\tconsole.log(x)\n\t\t\t\t\t\t\t\t// props.handleDiv(e.target.innerText, i, e) // this could be set to e.target.innerHTML to use \" text \"\n\t\t\t\t\t\t\t\tprops.setDisplayButtons(true)\n\t\t\t\t\t\t\t\tprops.setSavedStyle(e.target.style)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonInput: (e: any) => {\n\t\t\t\t\t\t\t\t// if (x.type != \"table\" && x.type != \"tr\") {\n\t\t\t\t\t\t\t\tx.content = e.target.textContent\n\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tfocusout: (e: any) => {\n\t\t\t\t\t\t\t\tprops.setDisplayButtons(false)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\tx.children != undefined && x.children.length != 0 ? <RenderContent setDisplayButtons={props.setDisplayButtons} setSavedStyle={props.setSavedStyle} savedStyle={props.savedStyle} content={x.children} /> : x.content,\n\t\t\t\t\t\t)\n\t\t\t\t))\n\t\t\t}\n\t\t</>\n\t)\n}\n\nexport default RenderContent1","/home/a/Documents/GitHub/web-maker/web-maker/src/AddItem.tsx",["168"],"import React, { useState } from 'react'\nimport { item } from './defaultTypes.js'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst AddItem = (props: any) => {\n\tconst addTitle = () => {\n\t\tconsole.log(props.content)\n\t\t// var content = props.content\n\t\tvar itemCopy: any = {}\n\t\tObject.assign(itemCopy, item)\n\t\tconsole.log(props)\n\t\titemCopy.text = props.text\n\t\titemCopy.type = props.type\n\t\tprops.content.push(itemCopy)\n\t\tprops.setEditCount(props.editCount + 1)\n\t}\n\treturn (\n\t\t<div onClick={addTitle} className=\"dropdown\">\n\t\t\t<div style={{scale: `${props.size}`}}>\n\t\t\t<FontAwesomeIcon size={\"2x\"} icon={props.icon}  />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default AddItem","/home/a/Documents/GitHub/web-maker/web-maker/src/AddImage.tsx",["169","170","171"],"import React, { useEffect, useState } from 'react'\nimport { image } from './defaultTypes.js'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst AddImage = (props: any) => {\n\tconst addImage = () => {\n\t\tprops.setAddImageOverlayActive(true)\n\t}\n\n\tuseEffect(() => {\n\t\tif (props.applyCount == 0) {\n\t\t\treturn\n\t\t}\n\t\tconsole.log(props.content)\n\t\t// var content = props.content\n\t\tvar itemCopy: any = {}\n\t\tObject.assign(itemCopy, image)\n\t\tconsole.log(props)\n\t\titemCopy.text = props.text\n\t\titemCopy.type = props.type\n\t\titemCopy.src = props.src\n\t\titemCopy.style = {width: props.imageSizes.width + props.imageSizes.magnitude, height: props.imageSizes.width + props.imageSizes.magnitude, margin: \"1%\"}\n\t\tconsole.log(itemCopy.style)\n\t\tconsole.log(itemCopy.style)\n\t\t// itemCopy.style.width = props.imageSizes.width + props.imageSizes.magnitude\n\t\t// itemCopy.style.height = props.imageSizes.height + props.imageSizes.magnitude\n\t\tprops.content.push(itemCopy)\n\t\tprops.setEditCount(props.editCount + 1)\n\t}, [props.applyImageCount])\n\tconsole.log(props.applyImageCount)\n\n\treturn (\n\t\t<>\n\t\t\t<div onClick={addImage} className=\"dropdown\">\n\t\t\t\t<FontAwesomeIcon size={\"2x\"} icon={props.icon}  />\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default AddImage","/home/a/Documents/GitHub/web-maker/web-maker/src/ModalImageSizeTable.tsx",["172","173","174"],"import React, { useEffect, useState } from 'react';\n\nconst ModalImageSizeTable = (props: any) => {\n\tconst [numberInputValue, setNumberInputValue] = useState({input1: \"\", input2: \"\"})\n\tconst handleNumberInput1 = (event: any) => {\n\t\tsetNumberInputValue(event.target.value)\n\t\tprops.imageSizes.width = 1\n\t} \n\n\treturn (\n\t\t<table className=\"imageModalTable\">\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<div> Select magnitude </div>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<select onChange={(e: any) => props.imageSizes.magnitude = e.target.value} className=\"preview imageModalSelect\">\n\t\t\t\t\t\t<option value=\"\"></option>\n\t\t\t\t\t\t<option value=\"%\"> Percentage </option>\n\t\t\t\t\t\t<option value=\"px\"> Pixel </option>\n\t\t\t\t\t</select>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr className=\"imageModalTable\">\n\t\t\t\t<td>\n\t\t\t\t\t<span> Width </span>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<input type=\"number\" onChange={(e: any) => props.imageSizes.width = e.target.value} placeholder=\"Desired Image width\" className=\"preview\"></input>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<span> Height </span>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<input type=\"number\" placeholder=\"Desired Image width\" onChange={(e: any) => props.imageSizes.height = e.target.value} className=\"preview\"></input>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t);\n}\n\n\nexport default ModalImageSizeTable;\n","/home/a/Documents/GitHub/web-maker/web-maker/src/TextAlignCheckbox.tsx",["175","176","177","178","179","180","181"],"import React, { useEffect, useState } from 'react'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAlignCenter, faAlignJustify, faAlignLeft, faAlignRight } from '@fortawesome/free-solid-svg-icons';\n\nexport const TextAlignCheckbox = (props: any) => {\n  const handleClick = () => {\n    props.setSelected(props.type)\n    props.savedStyle.textAlign = props.type\n  }\n\n  useEffect(() => {\n    props.setSelected(props.savedStyle.textAlign)\n  }, [props.modalStateActive])\n\n  return (\n    <label className=\"checkboxContainer\" onClick={handleClick}>\n      <input type=\"checkbox\" className=\"checkbox\" checked={props.selected == props.type ? true : false}></input>\n      <FontAwesomeIcon className=\"textAlignIcon\" icon={props.icon} />\n    </label>\n  )\n}\n\nexport default TextAlignCheckbox","/home/a/Documents/GitHub/web-maker/web-maker/src/defaultTypes.js",["182"],"import { faAlignCenter } from \"@fortawesome/free-solid-svg-icons\"\n\nexport const title = {\n    type: \"h1\",\n    text: \"Title\",\n    content: \"\",\n    style: {\n        margin: \"1%\"\n    },\n    children: []\n}\n\nexport const subTitle = {\n    type: \"h2\",\n    text: \"SubTitle\",\n    content: \"\",\n    style: {\n        margin: \"1%\"\n    },\n    children: []\n}\n\nexport const heading = {\n    type: \"h3\",\n    text: \"Heading\",\n    content: \"\",\n    style: {\n        margin: \"1%\"\n    },\n    children: []\n}\n\nexport const span = {\n    type: \"span\",\n    text: \"Text\",\n    content: \"\",\n    style: {\n        margin: \"1%\"\n    },\n    children: []\n}\n\nexport const div = {\n    type: \"div\",\n    text: \"Text\",\n    content: \"\",\n    style: {\n        margin: \"1%\"\n    },\n    children: []\n}\n\nexport const image = {\n    type: \"img\",\n    text: \"Image\",\n    src: \"\",\n    style: {\n        margin: \"1%\",\n        width: \"\",\n        height: \"\"\n    },\n}\n\nexport const table = {\n    type: \"table\",\n    text: \"Table\",\n    children: [],\n    style: {\n        textAlign: \"center\",\n        tableLayout: \"fixed\",\n        width: \"98%\",\n        wordWrap: \"break-word\",\n        margin: \"1%\",\n        border: \"1px solid\"\n    },\n}\n\nexport const item = {\n    type: \"\",\n    text: \"\",\n    content: \"\",\n    style: {\n        margin: \"1%\",\n        maxWidth: \"100%\",\n        wordWrap: \"break-word\"\n    },\n    children: []\n}\n\n\nexport const columnItem = {\n    type: \"div\",\n    text: \"Columns\",\n    content: \"\",\n    style: {\n        margin: \"1%\",\n        maxWidth: \"100%\",\n        padding: \"2%\",\n        wordWrap: \"break-word\",\n        display: \"flex\",\n    },\n    children: [{\n        type: \"p\",\n        text: \"Text\",\n        content: \"\",\n        style: {\n            margin: \"1%\",\n            width: \"48%\",\n            maxWidth: \"100%\",\n            wordWrap: \"break-word\",\n        },\n    },\n    {\n        type: \"p\",\n        text: \"Text\",\n        content: \"\",\n        style: {\n            margin: \"1%\",\n            maxWidth: \"100%\",\n            width: \"48%\",\n            wordWrap: \"break-word\",\n        }\n    }]\n}",["183","184"],"/home/a/Documents/GitHub/web-maker/web-maker/src/Login.tsx",["185","186"],"import React, { useEffect, useState } from 'react';\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ModalLogin from './ModalLogin'\n\n\n/* <FontAwesomeIcon icon={faPlusSquare} style={{ width: \"\" }} onClick={props.addToDivCount} className={props.previewMode ? \"previewMode\" : \"\"} /> */\nconst Login = (props: any) => {\n\tconst handleClick = () => {\n\t\tprops.setLoginModalStateActive(true)\n\t}\n\treturn (\n\t\t<>\n\t\t\t<FontAwesomeIcon size={\"1x\"} icon={faUser} className={`preview ${props.previewMode ? \"previewMode\" : \"\"}`} onClick={handleClick} />\n\t\t\t<ModalLogin content={props.content} setContent={props.setContent} token={props.token} setToken={props.setToken} loginModalStateActive={props.loginModalStateActive} setLoginModalStateActive={props.setLoginModalStateActive} />\n\t\t</>\n\t);\n}\n\n\nexport default Login;\n\n","/home/a/Documents/GitHub/web-maker/web-maker/src/ModalLogin.tsx",["187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206"],"import React, { useEffect, useState } from 'react';\nimport { isConstructorDeclaration } from 'typescript';\nimport ModalImageSizeTabel from './ModalImageSizeTable'\nimport { SaveProject, CreateProjectTokenRecovery, CreateProjectTokenObject, GetTokenFromRecovery, GetContentFromToken, GetFile, RemoveFile, CheckRecoveryKey } from './requests'\n\n\nconst ModalLogin = (props: any) => {\n\tconst textStyle = { fontSize: \"150%\", margin: \"1%\" }\n\tconst [waitingForTokenFromRecoveryKey, setWaitingForTokenFromRecoveryKey] = useState(false)\n\tconst [getFileCount, setGetFileCount] = useState(0)\n\tconst [removeFileCount, setRemoveFileCount] = useState(0)\n\tconst [getFileActivated, setGetFileActivated] = useState(false)\n\tconst [removeFileActivated, setRemoveFileActivated] = useState(false)\n\tconst [waitingForToken, setWaitingForToken] = useState(false)\n\tconst [inputValue, setInputValue] = useState(\"\")\n\tconst [recoveryKeyInputValue, setRecoveryKeyInputValue] = useState(\"\")\n\tconst [tokenFromRecoveryKeyInputValue, setTokenFromRecoveryKeyInputValue] = useState(\"\")\n\tconst [tokenInputValue, setTokenInputValue] = useState(\"\")\n\tconst [createProjectActivated, setCreateProjectActivated] = useState(false)\n\tconst [recoverTokenActivated, setRecoverTokenActivated] = useState(false)\n\tconst [importProjectActivated, setImportProjectActivated] = useState(false)\n\tconst [sentCount, setSentCount] = useState(0)\n\tconst [createCount, setCreateCount] = useState(0)\n\tconst [getContentCount, setGetContentCount] = useState(0)\n\tconst [recoverTokenCount, setRecoverTokenCount] = useState(0)\n\tconst [checkRecoveryKeyCount, setCheckRecoveryKeyCount] = useState(0)\n\tconst [recoveryTooLong, setRecoveryTooLong] = useState(false)\n\tconst [saveClicked, setSaveClicked] = useState(false)\n\tconst [recoveryKeyValid, setRecoveryKeyValid] = useState(false)\n\tconst [tokenToSet, setTokenToSet] = useState(\"\")\n\tvar { responseSavedStatus, loadingSaved } = SaveProject(sentCount, props.token, props.content)\n\tvar { responseToken, loadingResponseToken } = CreateProjectTokenRecovery(recoveryKeyInputValue, createCount)\n\tvar { responseStatus } = CreateProjectTokenObject(props.content, props.token)\n\tvar { responseTokenFromRecovery } = GetTokenFromRecovery(tokenFromRecoveryKeyInputValue, recoverTokenCount)\n\tvar { getFileStatus, loadingGetFile } = GetFile(props.token, getFileCount)\n\tvar { removeFileStatus, loadingRemoveFile} = RemoveFile(props.token, removeFileCount)\n\tvar { responseContent } = GetContentFromToken(tokenInputValue, getContentCount)\n\tvar { checkRecoveryKeyStatus, loadingCheckRecoveryKey } = CheckRecoveryKey(recoveryKeyInputValue, checkRecoveryKeyCount)\n\n\tuseEffect(() => {\n\t\tif (responseContent != null && responseContent != undefined && responseContent.length != null) {\n\t\t\tconsole.log(responseContent)\n\t\t\tprops.setContent(responseContent)\n\t\t}\n\t}, [responseContent])\n\n\tuseEffect(() => {\n\t\tconsole.log(\"LoadingCheckRecoveryKey: \", loadingCheckRecoveryKey, \"CheckrecoveryKeyStatus: \", checkRecoveryKeyStatus)\n\t\tif (!loadingCheckRecoveryKey && checkRecoveryKeyStatus == 200) {\n\t\t\tsetRecoveryKeyValid(true)\n\t\t\tconsole.log(\"Cretae project\")\n\t\t\tcreateProject()\n\t\t}\n\t}, [checkRecoveryKeyStatus, loadingCheckRecoveryKey\t])\n\n\tuseEffect(() => {\n\t\tif (!loadingResponseToken && responseToken != null && responseToken != \"\") {\n\t\t\tsetTokenToSet(responseToken)\n\t\t}\n\t}, [responseToken])\n\n\tuseEffect(() => {\n\t\tif (!props.loginModalState) {\n\t\t\tprops.setToken(tokenToSet)\n\t\t}\n\t}, [tokenToSet, props.loginModalState])\n\n\tconst handleLoginInput = (event: any) => {\n\t\tsetInputValue(event.target.value)\n\t}\n\n\tconst saveOnClick = () => {\n\t\tsetSentCount(sentCount + 1)\n\t\tsetSaveClicked(true)\n\t}\n\n\n\tconst createProject = () => {\n\t\tif (recoveryKeyInputValue.length > 29) {\n\t\t\tsetRecoveryTooLong(true)\n\t\t} else {\n\t\t\tsetCreateCount(createCount + 1)\n\t\t\tsetWaitingForToken(true)\n\t\t}\n\t}\n\n\tconst importProject = () => {\n\t\tsetGetContentCount(getContentCount + 1)\n\t\t// props.setToken(tokenInputValue)\n\t\tsetTokenToSet(tokenInputValue)\n\t\thideModal()\n\t}\n\n\tconsole.log(responseContent)\n\n\n\tconst hideModal = () => {\n\t\tprops.setLoginModalStateActive(false)\n\t\tsetRecoveryTooLong(false)\n\t\tsetSaveClicked(false)\n\t\tsetCreateProjectActivated(false)\n\t\tsetWaitingForToken(false)\n\t\tprops.setToken(tokenToSet)\n\t\tsetWaitingForTokenFromRecoveryKey(false)\n\t\tsetImportProjectActivated(false)\n\t\tsetRecoverTokenActivated(false)\n\t\tsetGetFileActivated(false)\n\t\tsetRecoveryKeyValid(false)\n\t\tif (removeFileActivated) {\n\t\t\tsetRemoveFileCount(removeFileCount + 1)\n\t\t\tsetRemoveFileActivated(false)\n\t\t}\n\t}\n\tconsole.log(\"Get file activated\", getFileActivated)\n\tconsole.log(\"Waiting for token\", getFileActivated)\n\tconst getFile = () => {\n\t\tsetGetFileActivated(true)\n\t\tsetGetFileCount(getFileCount + 1)\n\t\tsetRemoveFileActivated(true)\n\t}\n\n\tconst recoverToken = () => {\n\t\tsetRecoverTokenCount(recoverTokenCount + 1)\n\t\tsetWaitingForTokenFromRecoveryKey(true)\n\t}\n\n\tconsole.log(\"Token: \", props.token)\n\tconsole.log(props.token !== \"\" , !waitingForToken , getFileActivated)\n\n\tif (props.token === \"\" && !createProjectActivated && !importProjectActivated) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal editModal ${props.loginModalStateActive ? \"editModalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> Create new project </span>\n\t\t\t\t\t<button className=\"preview loginInput loginButton\" onClick={() => setCreateProjectActivated(true)}> Create </button>\n\t\t\t\t\t<span style={textStyle}> Import existing project </span>\n\t\t\t\t\t<button className=\"preview loginInput loginButton\" onClick={() => setImportProjectActivated(true)}> Import </button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t} else if (props.token !== \"\" && !waitingForToken && !getFileActivated) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal editModal ${props.loginModalStateActive ? \"editModalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> Save your current project </span>\n\t\t\t\t\t<button onClick={saveOnClick} className=\"preview loginInput loginButton\"> Save </button>\n\t\t\t\t\t<span className={`informationDiv ${responseSavedStatus == 200 && !loadingSaved && saveClicked ? \"unhide\" : \"hide\"}`}> Saved successfully </span>\n\t\t\t\t\t<span className={`alertDiv ${responseSavedStatus == 500 && !loadingSaved && saveClicked ? \"unhide\" : \"hide\"}`}> Unsuccessfull save, please try again later </span>\n\t\t\t\t\t<button type=\"button\" onClick={getFile} className=\"preview loginInput loginButton\"> Get html file </button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t} else if (props.token !== \"\" && !waitingForToken && getFileActivated) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal editModal ${props.loginModalStateActive ? \"editModalActive\" : \"\"}`}>\n\t\t\t\t\t<span> {loadingGetFile ? \"Loading file\" : \"\"} </span>\n\t\t\t\t\t<a href={`temp-${props.token}.html`} className={`preview loginInput loginButton ${loadingGetFile ? \"hide\" : \"unhide\"}`} download=\"index.html\" > Download file </a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t} else if (props.token === \"\" && createProjectActivated && !waitingForToken) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal editModal ${props.loginModalStateActive ? \"editModalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> Insert recovery key in case you forget your token </span>\n\t\t\t\t\t<input type=\"text\" className=\"input loginInput\" placeholder=\"Recovery key\" value={recoveryKeyInputValue} onChange={(e: any) => setRecoveryKeyInputValue(e.target.value)}></input>\n\t\t\t\t\t<div className=\"informationDiv recoveryTooLong\"> Make sure you save this recovery key. You will need the key in case you forget your token.</div>\n\t\t\t\t\t<div className={`informationDiv ${recoveryTooLong ? \"alertDiv unhide\" : \"hide\"}`}> You recovery key is too long, make sure its under 30 carachters </div>\n\t\t\t\t\t<div className={`alertDiv ${checkRecoveryKeyStatus == 500 ? \"unhide\" : \"hide\"}`}> The recovery key is already taken </div>\n\t\t\t\t\t<button onClick={() => setCheckRecoveryKeyCount(checkRecoveryKeyCount + 1)} className=\"preview loginInput loginButton\"> Create </button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t} else if (createProjectActivated && waitingForToken) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal editModal ${props.loginModalStateActive ? \"editModalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> This is your project token </span>\n\t\t\t\t\t<span>{responseToken != null ? responseToken : \"\"}</span>\n\t\t\t\t\t<div className={`informationDiv `}> Make sure you save this token. You will need the key to edit you project the next time you want to edit it.</div>\n\t\t\t\t\t<button onClick={hideModal} className=\"preview loginButton\" style={{ margin: \"1%\" }}> Continue </button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t} else if (props.token === \"\" && importProjectActivated && !recoverTokenActivated) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal editModal ${props.loginModalStateActive ? \"editModalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> Import your project with your project token </span>\n\t\t\t\t\t<div className={`informationDiv `}> If you cant remember your token click recover token. You will be able to recover your token with your recovery key</div>\n\t\t\t\t\t<input type=\"text\" className=\"input loginInput\" placeholder=\"Token\" value={tokenInputValue} onChange={(e: any) => setTokenInputValue(e.target.value)}></input>\n\t\t\t\t\t<div style={{ display: \"flex\", width: \"50%\", justifyContent: \"center\" }}>\n\t\t\t\t\t\t<button onClick={() => setRecoverTokenActivated(true)} className=\"preview loginInput loginButton\" > Recovery </button>\n\t\t\t\t\t\t<button onClick={importProject} className=\"preview loginInput loginButton\" > Import </button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t} else if (props.token === \"\" && importProjectActivated && recoverTokenActivated && !waitingForTokenFromRecoveryKey) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal editModal ${props.loginModalStateActive ? \"editModalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> Introduce recovery key to get your token </span>\n\t\t\t\t\t<div className=\"informationDiv\"> This recovery key has to be unique so try with a personal phrase or something like that. </div>\n\t\t\t\t\t<input type=\"text\" className=\"input loginInput\" placeholder=\"Recovery key\" value={tokenFromRecoveryKeyInputValue} onChange={(e: any) => setTokenFromRecoveryKeyInputValue(e.target.value)}></input>\n\t\t\t\t\t<button onClick={recoverToken} className=\"preview loginInput loginButton\"> Submit </button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t} else if (props.token === \"\" && importProjectActivated && recoverTokenActivated && waitingForTokenFromRecoveryKey) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal editModal ${props.loginModalStateActive ? \"editModalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> This is your project token </span>\n\t\t\t\t\t<span>{responseTokenFromRecovery != null ? responseTokenFromRecovery == 500 ? \"Wrong recovery key\" : responseTokenFromRecovery : \"\"}</span>\n\t\t\t\t\t<div className={`informationDiv`}> Make sure you save this token. You will need the key to edit you project the next time you want to edit it.</div>\n\t\t\t\t\t<button onClick={hideModal} className=\"preview loginButton loginInput\"> Continue </button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\treturn (<>hi </>)\n}\n\n\nexport default ModalLogin;\n","/home/a/Documents/GitHub/web-maker/web-maker/src/requests.tsx",["207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224"],"import React, { useEffect, useState } from 'react'\n\nconst url = process.env.REACT_APP_REQUEST_URL\nconst headersContent = {}\nconsole.log(process.env)\n\nexport const SaveProject = (sentCount: number, token: string, content: object) => {\n\tconst [state, setState] = useState({ responseSavedStatus: 0, loadingSaved: true })\n\tconst thisURL = url + \"updateTokenObject\"\n\tuseEffect(() => {\n\t\tif (sentCount != 0) {\n\t\t\tvar bodyContent = {\n\t\t\t\ttoken: token,\n\t\t\t\tobject: content\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ responseSavedStatus: state.responseSavedStatus, loadingSaved: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: number = await response.json()\n\t\t\t\tsetState({ responseSavedStatus: data, loadingSaved: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ responseSavedStatus: 0, loadingSaved: false })\n\t\t}\n\t}, [sentCount])\n\treturn state\n}\n\nexport const CreateProjectTokenRecovery = (recoverykey: string, createCount: number) => {\n\tconst [state, setState] = useState({ responseToken: \"\", loadingResponseToken: true })\n\tconst thisURL = url + \"insertTokenRecovery\"\n\tuseEffect(() => {\n\t\tconsole.log(createCount)\n\t\tif (createCount > 0 && createCount != null && createCount != undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\trecovery_key: recoverykey\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ responseToken: state.responseToken, loadingResponseToken: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: string = await response.json()\n\t\t\t\tsetState({ responseToken: data, loadingResponseToken: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ responseToken: \"\", loadingResponseToken: false })\n\t\t}\n\t}, [createCount])\n\treturn state\n}\n\nexport const CreateProjectTokenObject = (content: any, token: string) => {\n\tconst [state, setState] = useState({ responseStatus: \"\", loading: true })\n\tconst thisURL = url + \"insertTokenObject\"\n\tuseEffect(() => {\n\t\tif (token != \"\" && token != null && token != undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\tcontent: content,\n\t\t\t\ttoken: token\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ responseStatus: state.responseStatus, loading: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: string = await response.json()\n\t\t\t\tsetState({ responseStatus: data, loading: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ responseStatus: \"\", loading: false })\n\t\t}\n\t}, [token])\n\treturn state\n}\n\nexport const GetTokenFromRecovery = (recoverykey: string, recoveryCount: number) => {\n\tconst [state, setState] = useState({ responseTokenFromRecovery: null, loading: true })\n\tconst thisURL = url + \"getTokenFromRecovery\"\n\tuseEffect(() => {\n\t\tif (recoveryCount > 0 && recoveryCount != null && recoveryCount != undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\trecovery_key: recoverykey\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ responseTokenFromRecovery: state.responseTokenFromRecovery, loading: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: any = await response.json()\n\t\t\t\tsetState({ responseTokenFromRecovery: data, loading: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ responseTokenFromRecovery: null, loading: false })\n\t\t}\n\t}, [recoveryCount])\n\treturn state\n}\n\n\nexport const GetContentFromToken = (token: string, getContentCount: number) => {\n\tconst [state, setState] = useState({ responseContent: [], loading: true })\n\tconst thisURL = url + \"getObjectFromToken\"\n\tuseEffect(() => {\n\t\tif (getContentCount > 0 && getContentCount != null && getContentCount != undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\ttoken: token\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ responseContent: state.responseContent, loading: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: [] = await response.json()\n\t\t\t\tsetState({ responseContent: data, loading: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ responseContent: [], loading: false })\n\t\t}\n\t}, [getContentCount])\n\treturn state\n}\n\nexport const GetFile = (token: string, getFileCount: number) => {\n\tconst [state, setState] = useState({ getFileStatus: 0, loadingGetFile: true })\n\tconst thisURL = url + \"exportIntoHTML\"\n\tuseEffect(() => {\n\t\tif (getFileCount > 0 && getFileCount != null && getFileCount != undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\ttoken: token\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ getFileStatus: state.getFileStatus, loadingGetFile: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: number = await response.json()\n\t\t\t\tsetState({ getFileStatus: data, loadingGetFile: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ getFileStatus: 500, loadingGetFile: false })\n\t\t}\n\t}, [getFileCount])\n\treturn state\n}\n\nexport const RemoveFile = (token: string, removeFileCount: number) => {\n\tconst [state, setState] = useState({ removeFileStatus: 0, loadingRemoveFile: true })\n\tconst thisURL = url + \"removeFile\"\n\tuseEffect(() => {\n\t\tif (removeFileCount > 0 && removeFileCount != null && removeFileCount != undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\ttoken: token\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ removeFileStatus: state.removeFileStatus, loadingRemoveFile: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: number = await response.json()\n\t\t\t\tsetState({ removeFileStatus: data, loadingRemoveFile: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ removeFileStatus: 500, loadingRemoveFile: false })\n\t\t}\n\t}, [removeFileCount])\n\treturn state\n}\n\n\nexport const CheckRecoveryKey = (recoveryKey: string, checkRecoveryKeyCount: number) => {\n\tconst [state, setState] = useState({ checkRecoveryKeyStatus: 0, loadingCheckRecoveryKey: true })\n\tconst thisURL = url + \"doesRecoveryKeyExist\"\n\tuseEffect(() => {\n\t\tif (checkRecoveryKeyCount > 0 && checkRecoveryKeyCount != null && checkRecoveryKeyCount != undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\trecovery_key: recoveryKey\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ checkRecoveryKeyStatus: state.checkRecoveryKeyStatus, loadingCheckRecoveryKey: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: number = await response.json()\n\t\t\t\tsetState({ checkRecoveryKeyStatus: data, loadingCheckRecoveryKey: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ checkRecoveryKeyStatus: 0, loadingCheckRecoveryKey: false })\n\t\t}\n\t}, [checkRecoveryKeyCount])\n\treturn state\n}\n","/home/a/Documents/GitHub/web-maker/web-maker/src/ModalTable.tsx",["225","226"],"import React, { useEffect, useState } from 'react';\n\n\n/* <FontAwesomeIcon icon={faPlusSquare} style={{ width: \"\" }} onClick={props.addToDivCount} className={props.previewMode ? \"previewMode\" : \"\"} /> */\nconst ModalTable = (props: any) => {\n\treturn (\n\t\t<div className=\"imageModalContainer\">\n\t\t\t<div className={`overlay addImageOverlay ${props.addTableOverlayActive ? \"overlayActive addImageOverlayActive\" : \"\"}`} onClick={() => props.setAddTableOverlayActive(false)}></div>\n\t\t\t<div className={`addImageModal tableSizesContainer editModal ${props.addTableOverlayActive ? \"editModalActive\" : \"\"}`}>\n\t\t\t\t<h1 style={{fontWeight: \"normal\"}}> Create table </h1>\n\t\t\t\t<input type=\"number\" placeholder=\"Height\" className=\"loginInput input tableSizesInput\" onChange={(e: any) => props.tableSizes.width = e.target.value}></input>\n\t\t\t\t<input type=\"number\" placeholder=\"Width\" className=\"loginInput input tableSizesInput\" onChange={(e: any) => props.tableSizes.height = e.target.value}></input>\n\t\t\t\t<button className=\"preview addImageModalButton\" onClick={() => {\n\t\t\t\t\tprops.setAddTableOverlayActive(false)\n\t\t\t\t\tprops.setApplyTableCount(props.applyCount + 1)\n\t\t\t\t}}> Apply </button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n\nexport default ModalTable;\n\n","/home/a/Documents/GitHub/web-maker/web-maker/src/AddTable.tsx",["227","228","229"],"import React, { useEffect, useState } from 'react'\nimport { table } from './defaultTypes.js'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst AddTable = (props: any) => {\n\tconst addTable = () => {\n\t\tprops.setAddTableOverlayActive(true)\n\t}\n\n\tuseEffect(() => {\n\t\tif (props.applyTableCount == 0) {\n\t\t\treturn\n\t\t}\n\t\tvar itemCopy: any = {}\n\t\tObject.assign(itemCopy, table)\n\t\tconsole.log(\"TableSizes: \", props.tableSizes)\n\t\tfor (let i = 0; i < props.tableSizes.height; i++) {\n\t\t\titemCopy.children.push({\n\t\t\t\ttype: \"tr\",\n\t\t\t\ttext: \"Tr\",\n\t\t\t\tstyle: {\n\t\t\t\t\t// margin: \"1%\",\n\t\t\t\t\tborder: \"1px solid\"\n\t\t\t\t},\n\t\t\t\tchildren: []\n\t\t\t})\n\t\t\tfor (let n = 0; n < props.tableSizes.width; n++) {\n\t\t\t\titemCopy.children[i].children.push({\n\t\t\t\t\ttype: \"td\",\n\t\t\t\t\ttext: \"Td\",\n\t\t\t\t\tcontent: \"\",\n\t\t\t\t\tchildren: [],\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\twidth: `${100 / props.tableSizes.width - 1}`,\n\t\t\t\t\t\t// display: \"block\",\n\t\t\t\t\t\ttextAlign: \"center\",\n\t\t\t\t\t\t// margin: \"1%\",\n\t\t\t\t\t\tborder: \"1px solid\"\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\t// itemCopy.style.width = props.imageSizes.width + props.imageSizes.magnitude\n\t\t// itemCopy.style.height = props.imageSizes.height + props.imageSizes.magnitude\n\t\tconsole.log(\"itemcopy: \", itemCopy)\n\t\tprops.content.push(itemCopy)\n\t\tprops.setEditCount(props.editCount + 1)\n\t}, [props.applyTableCount])\n\tconsole.log(\"apply table count\", props.applyTableCount)\n\n\treturn (\n\t\t<>\n\t\t\t<div onClick={addTable} className=\"dropdown\">\n\t\t\t\t<FontAwesomeIcon size={\"2x\"} icon={props.icon}  />\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default AddTable","/home/a/Documents/GitHub/web-maker/web-maker/src/Alerts.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/AddTextCollumn.tsx",["230"],"import React, { useState } from 'react'\nimport { columnItem } from './defaultTypes.js'\nimport { faColumns } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst AddTextCollumns = (props: any) => {\n\tconst addTitle = () => {\n\t\tvar itemCopy: any = {}\n\t\tObject.assign(itemCopy, columnItem)\n\t\tprops.content.push(itemCopy)\n\t\tprops.setEditCount(props.editCount + 1)\n\t}\n\treturn (\n\t\t<div onClick={addTitle} className=\"dropdown\">\n\t\t\t<FontAwesomeIcon size={\"2x\"} icon={faColumns}  />\n\t\t</div>\n\t)\n}\n\nexport default AddTextCollumns","/home/a/Documents/GitHub/web-maker/web-maker/src/AppMain.tsx",["231","232","233","234","235","236","237","238","239","240"],"import React, { useState } from 'react';\nimport './App.css';\nimport Preview from './Preview'\nimport Alerts from './Alerts'\nimport AddButton from './AddButton'\nimport Modal from './Modal'\nimport DropdownMenu from './DropdownMenu'\nimport RenderContent from './RenderContent'\nimport Login from './Login'\n// import Styles from './StylesTextAlign'\nimport Edit from './Edit'\n\nfunction AppMain() {\n  // const [inputValue, setInputValue] = useState(\"\")\n  const [token, setToken] = useState(\"\")\n  const [modalStateActive, setModalStateActive] = useState(false)\n  const [loginModalStateActive, setLoginModalStateActive] = useState(false)\n  const [addButtonStateActive, setAddButtonStateActive] = useState(false)\n  const [divCount, setDivCount] = useState(0)\n  const [displayButtons, setDisplayButtons] = useState(false)\n  const [array, setArray] = useState([\"\"])\n  const [input, setInput] = useState(\"\")\n  const [html, setHtml] = useState(\"\")\n  const [savedInput, setSavedInput] = useState({ textContent: \"\" })\n  const [savedIndex, setSavedIndex] = useState(1)\n  const [savedStyle, setSavedStyle] = useState({ textAlign: \"\", borderStyle: \"\" })\n  const [editCount, setEditCount] = useState(0)\n  const [previewMode, setPreviewMode] = useState(false)\n  const [content, setContent] = useState([])\n\n  const addToDivCount = () => {\n    setDivCount(divCount + 1)\n    var newArray: string[]\n    array.push(input)\n    var newArray = array\n    setArray(newArray)\n  }\n\n  const handleDiv = (content: string, index: number, event: any) => {\n    setInput(content)\n    setSavedIndex(index)\n    setSavedStyle(event.target.style)\n    setSavedInput(event.target)\n    setDisplayButtons(true)\n  }\n\n\n  const logStyle = (e: any) => {\n    console.log(e.target.style.borderStyle)\n  }\n\n  const handlePreview = (bool: boolean) => {\n    setPreviewMode(bool)\n  }\n\n\n  console.log(\"Content: \", content)\n  return (\n    <div className=\"App\">\n      <div className=\"tools\">\n        <Login content={content} setContent={setContent} token={token} previewMode={previewMode} setToken={setToken} setLoginModalStateActive={setLoginModalStateActive} loginModalStateActive={loginModalStateActive} />\n        <Preview previewMode={previewMode} handlePreview={setPreviewMode} />\n        {/* <Edit previewMode={previewMode} savedStyle={savedStyle} setModalStateActive={setModalStateActive} displayButtons={displayButtons} /> */}\n        <AddButton content={content} setContent={setContent} addButtonStateActive={addButtonStateActive} setAddButtonStateActive={setAddButtonStateActive} editCount={editCount} setEditCount={setEditCount} previewMode={previewMode} addToDivCount={addToDivCount} />\n      </div>\n      <Alerts  />\n      <Modal input={input} setInput={setInput} setSavedStyle={setSavedStyle} savedStyle={savedStyle} savedInput={savedInput} previewMode={previewMode} modalStateActive={modalStateActive} setModalStateActive={setModalStateActive} />\n      <div className=\"render\">\n        <RenderContent setDisplayButtons={setDisplayButtons} previewMode={previewMode} setSavedStyle={setSavedStyle} savedStyle={savedStyle} content={content} />\n      </div>\n    </div>\n  );\n}\n\nexport default AppMain;\n","/home/a/Documents/GitHub/web-maker/web-maker/src/AppLandingPage.tsx",[],{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","severity":1,"message":"246","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":25},{"ruleId":"245","severity":1,"message":"249","line":3,"column":49,"nodeType":"247","messageId":"248","endLine":3,"endColumn":53},{"ruleId":"245","severity":1,"message":"250","line":3,"column":55,"nodeType":"247","messageId":"248","endLine":3,"endColumn":63},{"ruleId":"245","severity":1,"message":"251","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":26},{"ruleId":"245","severity":1,"message":"251","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":26},{"ruleId":"245","severity":1,"message":"246","line":1,"column":28,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"246","line":1,"column":16,"nodeType":"247","messageId":"248","endLine":1,"endColumn":24},{"ruleId":"245","severity":1,"message":"246","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":25},{"ruleId":"241","replacedBy":"252"},{"ruleId":"243","replacedBy":"253"},{"ruleId":"245","severity":1,"message":"251","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":26},{"ruleId":"245","severity":1,"message":"254","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":11},{"ruleId":"245","severity":1,"message":"255","line":6,"column":22,"nodeType":"247","messageId":"248","endLine":6,"endColumn":36},{"ruleId":"256","severity":1,"message":"257","line":14,"column":13,"nodeType":"258","messageId":"259","endLine":14,"endColumn":15},{"ruleId":"260","severity":1,"message":"261","line":14,"column":24,"nodeType":"262","endLine":14,"endColumn":69},{"ruleId":"256","severity":1,"message":"263","line":34,"column":19,"nodeType":"258","messageId":"259","endLine":34,"endColumn":21},{"ruleId":"256","severity":1,"message":"263","line":34,"column":53,"nodeType":"258","messageId":"259","endLine":34,"endColumn":55},{"ruleId":"245","severity":1,"message":"264","line":2,"column":8,"nodeType":"247","messageId":"248","endLine":2,"endColumn":20},{"ruleId":"245","severity":1,"message":"251","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":26},{"ruleId":"245","severity":1,"message":"246","line":1,"column":28,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"265","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":25},{"ruleId":"256","severity":1,"message":"257","line":18,"column":49,"nodeType":"258","messageId":"259","endLine":18,"endColumn":51},{"ruleId":"266","severity":1,"message":"267","line":24,"column":5,"nodeType":"268","endLine":24,"endColumn":29,"suggestions":"269"},{"ruleId":"245","severity":1,"message":"246","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":25},{"ruleId":"245","severity":1,"message":"254","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":11},{"ruleId":"256","severity":1,"message":"257","line":13,"column":13,"nodeType":"258","messageId":"259","endLine":13,"endColumn":15},{"ruleId":"260","severity":1,"message":"261","line":13,"column":24,"nodeType":"262","endLine":13,"endColumn":69},{"ruleId":"256","severity":1,"message":"263","line":16,"column":32,"nodeType":"258","messageId":"259","endLine":16,"endColumn":34},{"ruleId":"256","severity":1,"message":"263","line":16,"column":53,"nodeType":"258","messageId":"259","endLine":16,"endColumn":55},{"ruleId":"256","severity":1,"message":"263","line":34,"column":19,"nodeType":"258","messageId":"259","endLine":34,"endColumn":21},{"ruleId":"256","severity":1,"message":"263","line":34,"column":53,"nodeType":"258","messageId":"259","endLine":34,"endColumn":55},{"ruleId":"245","severity":1,"message":"246","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":25},{"ruleId":"245","severity":1,"message":"246","line":1,"column":28,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"256","severity":1,"message":"257","line":11,"column":24,"nodeType":"258","messageId":"259","endLine":11,"endColumn":26},{"ruleId":"266","severity":1,"message":"270","line":29,"column":5,"nodeType":"268","endLine":29,"endColumn":28,"suggestions":"271"},{"ruleId":"245","severity":1,"message":"251","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":26},{"ruleId":"245","severity":1,"message":"272","line":4,"column":9,"nodeType":"247","messageId":"248","endLine":4,"endColumn":25},{"ruleId":"245","severity":1,"message":"273","line":5,"column":8,"nodeType":"247","messageId":"248","endLine":5,"endColumn":26},{"ruleId":"245","severity":1,"message":"246","line":1,"column":28,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"274","line":3,"column":10,"nodeType":"247","messageId":"248","endLine":3,"endColumn":23},{"ruleId":"245","severity":1,"message":"275","line":3,"column":25,"nodeType":"247","messageId":"248","endLine":3,"endColumn":39},{"ruleId":"245","severity":1,"message":"276","line":3,"column":41,"nodeType":"247","messageId":"248","endLine":3,"endColumn":52},{"ruleId":"245","severity":1,"message":"277","line":3,"column":54,"nodeType":"247","messageId":"248","endLine":3,"endColumn":66},{"ruleId":"266","severity":1,"message":"278","line":13,"column":6,"nodeType":"268","endLine":13,"endColumn":30,"suggestions":"279"},{"ruleId":"256","severity":1,"message":"257","line":17,"column":75,"nodeType":"258","messageId":"259","endLine":17,"endColumn":77},{"ruleId":"280","severity":1,"message":"274","line":1,"column":10,"nodeType":"247","messageId":"248","endLine":1,"endColumn":23},{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","severity":1,"message":"251","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":26},{"ruleId":"245","severity":1,"message":"246","line":1,"column":28,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"281","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":34},{"ruleId":"245","severity":1,"message":"282","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":27},{"ruleId":"245","severity":1,"message":"283","line":15,"column":9,"nodeType":"247","messageId":"248","endLine":15,"endColumn":19},{"ruleId":"245","severity":1,"message":"284","line":29,"column":9,"nodeType":"247","messageId":"248","endLine":29,"endColumn":25},{"ruleId":"245","severity":1,"message":"285","line":33,"column":8,"nodeType":"247","messageId":"248","endLine":33,"endColumn":22},{"ruleId":"245","severity":1,"message":"286","line":35,"column":8,"nodeType":"247","messageId":"248","endLine":35,"endColumn":21},{"ruleId":"245","severity":1,"message":"287","line":36,"column":8,"nodeType":"247","messageId":"248","endLine":36,"endColumn":24},{"ruleId":"245","severity":1,"message":"288","line":36,"column":26,"nodeType":"247","messageId":"248","endLine":36,"endColumn":43},{"ruleId":"256","severity":1,"message":"263","line":41,"column":50,"nodeType":"258","messageId":"259","endLine":41,"endColumn":52},{"ruleId":"266","severity":1,"message":"278","line":45,"column":5,"nodeType":"268","endLine":45,"endColumn":22,"suggestions":"289"},{"ruleId":"256","severity":1,"message":"257","line":49,"column":58,"nodeType":"258","messageId":"259","endLine":49,"endColumn":60},{"ruleId":"266","severity":1,"message":"290","line":54,"column":5,"nodeType":"268","endLine":54,"endColumn":55,"suggestions":"291"},{"ruleId":"256","severity":1,"message":"263","line":57,"column":71,"nodeType":"258","messageId":"259","endLine":57,"endColumn":73},{"ruleId":"266","severity":1,"message":"292","line":60,"column":5,"nodeType":"268","endLine":60,"endColumn":20,"suggestions":"293"},{"ruleId":"266","severity":1,"message":"278","line":66,"column":5,"nodeType":"268","endLine":66,"endColumn":40,"suggestions":"294"},{"ruleId":"245","severity":1,"message":"295","line":68,"column":8,"nodeType":"247","messageId":"248","endLine":68,"endColumn":24},{"ruleId":"256","severity":1,"message":"257","line":149,"column":61,"nodeType":"258","messageId":"259","endLine":149,"endColumn":63},{"ruleId":"256","severity":1,"message":"257","line":150,"column":55,"nodeType":"258","messageId":"259","endLine":150,"endColumn":57},{"ruleId":"256","severity":1,"message":"257","line":174,"column":57,"nodeType":"258","messageId":"259","endLine":174,"endColumn":59},{"ruleId":"256","severity":1,"message":"257","line":224,"column":75,"nodeType":"258","messageId":"259","endLine":224,"endColumn":77},{"ruleId":"245","severity":1,"message":"296","line":1,"column":8,"nodeType":"247","messageId":"248","endLine":1,"endColumn":13},{"ruleId":"256","severity":1,"message":"263","line":11,"column":17,"nodeType":"258","messageId":"259","endLine":11,"endColumn":19},{"ruleId":"266","severity":1,"message":"297","line":32,"column":5,"nodeType":"268","endLine":32,"endColumn":16,"suggestions":"298"},{"ruleId":"256","severity":1,"message":"263","line":41,"column":61,"nodeType":"258","messageId":"259","endLine":41,"endColumn":63},{"ruleId":"266","severity":1,"message":"299","line":61,"column":5,"nodeType":"268","endLine":61,"endColumn":18,"suggestions":"300"},{"ruleId":"256","severity":1,"message":"263","line":69,"column":13,"nodeType":"258","messageId":"259","endLine":69,"endColumn":15},{"ruleId":"256","severity":1,"message":"263","line":69,"column":45,"nodeType":"258","messageId":"259","endLine":69,"endColumn":47},{"ruleId":"266","severity":1,"message":"301","line":90,"column":5,"nodeType":"268","endLine":90,"endColumn":12,"suggestions":"302"},{"ruleId":"256","severity":1,"message":"263","line":98,"column":67,"nodeType":"258","messageId":"259","endLine":98,"endColumn":69},{"ruleId":"266","severity":1,"message":"299","line":118,"column":5,"nodeType":"268","endLine":118,"endColumn":20,"suggestions":"303"},{"ruleId":"256","severity":1,"message":"263","line":127,"column":73,"nodeType":"258","messageId":"259","endLine":127,"endColumn":75},{"ruleId":"266","severity":1,"message":"304","line":147,"column":5,"nodeType":"268","endLine":147,"endColumn":22,"suggestions":"305"},{"ruleId":"256","severity":1,"message":"263","line":155,"column":64,"nodeType":"258","messageId":"259","endLine":155,"endColumn":66},{"ruleId":"266","severity":1,"message":"304","line":175,"column":5,"nodeType":"268","endLine":175,"endColumn":19,"suggestions":"306"},{"ruleId":"256","severity":1,"message":"263","line":183,"column":73,"nodeType":"258","messageId":"259","endLine":183,"endColumn":75},{"ruleId":"266","severity":1,"message":"304","line":203,"column":5,"nodeType":"268","endLine":203,"endColumn":22,"suggestions":"307"},{"ruleId":"256","severity":1,"message":"263","line":212,"column":91,"nodeType":"258","messageId":"259","endLine":212,"endColumn":93},{"ruleId":"266","severity":1,"message":"308","line":232,"column":5,"nodeType":"268","endLine":232,"endColumn":28,"suggestions":"309"},{"ruleId":"245","severity":1,"message":"251","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":26},{"ruleId":"245","severity":1,"message":"246","line":1,"column":28,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"246","line":1,"column":28,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"256","severity":1,"message":"257","line":11,"column":29,"nodeType":"258","messageId":"259","endLine":11,"endColumn":31},{"ruleId":"266","severity":1,"message":"278","line":48,"column":5,"nodeType":"268","endLine":48,"endColumn":28,"suggestions":"310"},{"ruleId":"245","severity":1,"message":"246","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":25},{"ruleId":"245","severity":1,"message":"311","line":7,"column":8,"nodeType":"247","messageId":"248","endLine":7,"endColumn":20},{"ruleId":"245","severity":1,"message":"312","line":11,"column":8,"nodeType":"247","messageId":"248","endLine":11,"endColumn":12},{"ruleId":"245","severity":1,"message":"313","line":20,"column":10,"nodeType":"247","messageId":"248","endLine":20,"endColumn":24},{"ruleId":"245","severity":1,"message":"314","line":23,"column":10,"nodeType":"247","messageId":"248","endLine":23,"endColumn":14},{"ruleId":"245","severity":1,"message":"315","line":23,"column":16,"nodeType":"247","messageId":"248","endLine":23,"endColumn":23},{"ruleId":"245","severity":1,"message":"316","line":25,"column":10,"nodeType":"247","messageId":"248","endLine":25,"endColumn":20},{"ruleId":"317","severity":1,"message":"318","line":35,"column":9,"nodeType":"247","messageId":"319","endLine":35,"endColumn":17},{"ruleId":"245","severity":1,"message":"320","line":39,"column":9,"nodeType":"247","messageId":"248","endLine":39,"endColumn":18},{"ruleId":"245","severity":1,"message":"321","line":48,"column":9,"nodeType":"247","messageId":"248","endLine":48,"endColumn":17},{"ruleId":"245","severity":1,"message":"322","line":52,"column":9,"nodeType":"247","messageId":"248","endLine":52,"endColumn":22},"no-native-reassign",["323"],"no-negated-in-lhs",["324"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Redirect' is defined but never used.","'useEffect' is defined but never used.",["323"],["324"],"'App' is defined but never used.","'setNotEditable' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","Expected '!==' and instead saw '!='.","'DropdownItem' is defined but never used.","'FontAwesomeIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.on', 'props.propertyToToggle', and 'props.savedStyle'. Either include them or remove the dependency array.","ArrayExpression",["325"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["326"],"'numberInputValue' is assigned a value but never used.","'handleNumberInput1' is assigned a value but never used.","'faAlignCenter' is defined but never used.","'faAlignJustify' is defined but never used.","'faAlignLeft' is defined but never used.","'faAlignRight' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["327"],"no-unused-vars","'isConstructorDeclaration' is defined but never used.","'ModalImageSizeTabel' is defined but never used.","'inputValue' is assigned a value but never used.","'recoveryKeyValid' is assigned a value but never used.","'responseStatus' is assigned a value but never used.","'getFileStatus' is assigned a value but never used.","'removeFileStatus' is assigned a value but never used.","'loadingRemoveFile' is assigned a value but never used.",["328"],"React Hook useEffect has a missing dependency: 'createProject'. Either include it or remove the dependency array.",["329"],"React Hook useEffect has a missing dependency: 'loadingResponseToken'. Either include it or remove the dependency array.",["330"],["331"],"'handleLoginInput' is assigned a value but never used.","'React' is defined but never used.","React Hook useEffect has missing dependencies: 'content', 'thisURL', and 'token'. Either include them or remove the dependency array.",["332"],"React Hook useEffect has missing dependencies: 'recoverykey' and 'thisURL'. Either include them or remove the dependency array.",["333"],"React Hook useEffect has missing dependencies: 'content' and 'thisURL'. Either include them or remove the dependency array.",["334"],["335"],"React Hook useEffect has missing dependencies: 'thisURL' and 'token'. Either include them or remove the dependency array.",["336"],["337"],["338"],"React Hook useEffect has missing dependencies: 'recoveryKey' and 'thisURL'. Either include them or remove the dependency array.",["339"],["340"],"'DropdownMenu' is defined but never used.","'Edit' is defined but never used.","'displayButtons' is assigned a value but never used.","'html' is assigned a value but never used.","'setHtml' is assigned a value but never used.","'savedIndex' is assigned a value but never used.","@typescript-eslint/no-redeclare","'newArray' is already defined.","redeclared","'handleDiv' is assigned a value but never used.","'logStyle' is assigned a value but never used.","'handlePreview' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},"Update the dependencies array to be: [props.modalStateActive, props.on, props.propertyToToggle, props.savedStyle]",{"range":"373","text":"374"},"Update the dependencies array to be: [props, props.applyImageCount]",{"range":"375","text":"376"},"Update the dependencies array to be: [props, props.modalStateActive]",{"range":"377","text":"378"},"Update the dependencies array to be: [props, responseContent]",{"range":"379","text":"380"},"Update the dependencies array to be: [checkRecoveryKeyStatus, createProject, loadingCheckRecoveryKey]",{"range":"381","text":"382"},"Update the dependencies array to be: [loadingResponseToken, responseToken]",{"range":"383","text":"384"},"Update the dependencies array to be: [tokenToSet, props.loginModalState, props]",{"range":"385","text":"386"},"Update the dependencies array to be: [content, sentCount, thisURL, token]",{"range":"387","text":"388"},"Update the dependencies array to be: [createCount, recoverykey, thisURL]",{"range":"389","text":"390"},"Update the dependencies array to be: [content, thisURL, token]",{"range":"391","text":"392"},"Update the dependencies array to be: [recoveryCount, recoverykey, thisURL]",{"range":"393","text":"394"},"Update the dependencies array to be: [getContentCount, thisURL, token]",{"range":"395","text":"396"},"Update the dependencies array to be: [getFileCount, thisURL, token]",{"range":"397","text":"398"},"Update the dependencies array to be: [removeFileCount, thisURL, token]",{"range":"399","text":"400"},"Update the dependencies array to be: [checkRecoveryKeyCount, recoveryKey, thisURL]",{"range":"401","text":"402"},"Update the dependencies array to be: [props, props.applyTableCount]",{"range":"403","text":"404"},[577,601],"[props.modalStateActive, props.on, props.propertyToToggle, props.savedStyle]",[1008,1031],"[props, props.applyImageCount]",[467,491],"[props, props.modalStateActive]",[2818,2835],"[props, responseContent]",[3133,3183],"[checkRecoveryKeyStatus, createProject, loadingCheckRecoveryKey]",[3324,3339],"[loadingResponseToken, responseToken]",[3431,3466],"[tokenToSet, props.loginModalState, props]",[1021,1032],"[content, sentCount, thisURL, token]",[2005,2018],"[createCount, recoverykey, thisURL]",[2893,2900],"[content, thisURL, token]",[3858,3873],"[recoveryCount, recoverykey, thisURL]",[4763,4780],"[getContentCount, thisURL, token]",[5663,5677],"[getFileCount, thisURL, token]",[6598,6615],"[removeFileCount, thisURL, token]",[7648,7671],"[checkRecoveryKeyCount, recoveryKey, thisURL]",[1279,1302],"[props, props.applyTableCount]"]