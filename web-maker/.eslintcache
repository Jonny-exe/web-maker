[{"/home/a/Documents/GitHub/web-maker/web-maker/src/index.tsx":"1","/home/a/Documents/GitHub/web-maker/web-maker/src/reportWebVitals.ts":"2","/home/a/Documents/GitHub/web-maker/web-maker/src/App.tsx":"3","/home/a/Documents/GitHub/web-maker/web-maker/src/AddButton.tsx":"4","/home/a/Documents/GitHub/web-maker/web-maker/src/Preview.tsx":"5","/home/a/Documents/GitHub/web-maker/web-maker/src/Edit.tsx":"6","/home/a/Documents/GitHub/web-maker/web-maker/src/RenderContent.tsx":"7","/home/a/Documents/GitHub/web-maker/web-maker/src/DropdownItems.tsx":"8","/home/a/Documents/GitHub/web-maker/web-maker/src/StylesTextAlign.tsx":"9","/home/a/Documents/GitHub/web-maker/web-maker/src/StylesToggle.tsx":"10","/home/a/Documents/GitHub/web-maker/web-maker/src/RenderContent1.tsx":"11","/home/a/Documents/GitHub/web-maker/web-maker/src/AddItem.tsx":"12","/home/a/Documents/GitHub/web-maker/web-maker/src/AddImage.tsx":"13","/home/a/Documents/GitHub/web-maker/web-maker/src/TextAlignCheckbox.tsx":"14","/home/a/Documents/GitHub/web-maker/web-maker/src/defaultTypes.js":"15","/home/a/Documents/GitHub/web-maker/web-maker/src/Login.tsx":"16","/home/a/Documents/GitHub/web-maker/web-maker/src/requests.tsx":"17","/home/a/Documents/GitHub/web-maker/web-maker/src/AddTable.tsx":"18","/home/a/Documents/GitHub/web-maker/web-maker/src/Alerts.tsx":"19","/home/a/Documents/GitHub/web-maker/web-maker/src/AddTextCollumn.tsx":"20","/home/a/Documents/GitHub/web-maker/web-maker/src/Modals/ModalImage.tsx":"21","/home/a/Documents/GitHub/web-maker/web-maker/src/Modals/ModalTable.tsx":"22","/home/a/Documents/GitHub/web-maker/web-maker/src/Modals/ModalImageSizeTable.tsx":"23","/home/a/Documents/GitHub/web-maker/web-maker/src/Modals/ModalLogin.tsx":"24","/home/a/Documents/GitHub/web-maker/web-maker/src/Modals/Modal.tsx":"25","/home/a/Documents/GitHub/web-maker/web-maker/src/Modals/ModalEditPlacement.tsx":"26","/home/a/Documents/GitHub/web-maker/web-maker/src/exceptionItems.js":"27"},{"size":501,"mtime":1609711480124,"results":"28","hashOfConfig":"29"},{"size":421,"mtime":1609711480140,"results":"30","hashOfConfig":"29"},{"size":2885,"mtime":1609711479572,"results":"31","hashOfConfig":"29"},{"size":2738,"mtime":1609711479304,"results":"32","hashOfConfig":"29"},{"size":547,"mtime":1609711479904,"results":"33","hashOfConfig":"29"},{"size":367,"mtime":1609325448503,"results":"34","hashOfConfig":"29"},{"size":2978,"mtime":1609711479932,"results":"35","hashOfConfig":"29"},{"size":2779,"mtime":1609711479620,"results":"36","hashOfConfig":"29"},{"size":1358,"mtime":1609711479980,"results":"37","hashOfConfig":"29"},{"size":1125,"mtime":1609711480000,"results":"38","hashOfConfig":"29"},{"size":1732,"mtime":1609711479952,"results":"39","hashOfConfig":"29"},{"size":706,"mtime":1609711479356,"results":"40","hashOfConfig":"29"},{"size":994,"mtime":1609711479336,"results":"41","hashOfConfig":"29"},{"size":715,"mtime":1609711480012,"results":"42","hashOfConfig":"29"},{"size":1950,"mtime":1609711480040,"results":"43","hashOfConfig":"29"},{"size":823,"mtime":1609711479664,"results":"44","hashOfConfig":"29"},{"size":8815,"mtime":1609711480216,"results":"45","hashOfConfig":"29"},{"size":1756,"mtime":1609711479388,"results":"46","hashOfConfig":"29"},{"size":612,"mtime":1609711647409,"results":"47","hashOfConfig":"29"},{"size":579,"mtime":1609711479408,"results":"48","hashOfConfig":"29"},{"size":1644,"mtime":1609711479740,"results":"49","hashOfConfig":"29"},{"size":1349,"mtime":1609711479892,"results":"50","hashOfConfig":"29"},{"size":1429,"mtime":1609711479768,"results":"51","hashOfConfig":"29"},{"size":15168,"mtime":1609711479864,"results":"52","hashOfConfig":"29"},{"size":953,"mtime":1609711479680,"results":"53","hashOfConfig":"29"},{"size":2539,"mtime":1609711479716,"results":"54","hashOfConfig":"29"},{"size":125,"mtime":1609711480052,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"l7xcaf",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},"/home/a/Documents/GitHub/web-maker/web-maker/src/index.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/reportWebVitals.ts",[],["121","122"],"/home/a/Documents/GitHub/web-maker/web-maker/src/App.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/AddButton.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/Preview.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/Edit.tsx",["123"],"import React, { useState } from 'react'\n\nexport const Edit = (props: any) => {\n\n\treturn (\n\t\t<div className=\"preview\">\n\t\t\t<button onClick={() => {\n\t\t\t\tprops.setModalStateActive(true)\n\t\t\t}} className={`preview ${props.previewMode ? \"previewMode\" : \"\"} ${props.displayButtons ? \"displayButtons\" : \"notDisplayButtons\"}`}> Edit </button>\n\t\t</div>\n\t)\n}\n\nexport default Edit",["124","125"],"/home/a/Documents/GitHub/web-maker/web-maker/src/RenderContent.tsx",["126","127","128"],"import React, { useEffect, useState } from \"react\";\nimport { notEditable } from \"./exceptionItems\";\nimport RenderContent1 from \"./RenderContent1\";\n\nexport const RenderContent = (props: any) => {\n  const [holdCounter, setHoldCounter] = useState(-1);\n  const [cancelHover, setCancelHover] = useState(false);\n  useEffect(() => {\n    if (props.itemIndex !== -1 && holdCounter !== -1) {\n      if (!cancelHover) {\n        if (holdCounter < 4) {\n          var timer = setTimeout(increaseHoldIndex, 75);\n        } else {\n          setHoldCounter(-1);\n          props.setModalEditPlacementActive(true);\n          setCancelHover(true);\n        }\n      } else {\n        setHoldCounter(-1);\n      }\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [holdCounter]);\n\n  const increaseHoldIndex = () => {\n    setHoldCounter(holdCounter + 1);\n  };\n\n  console.log(\n    props.content[0] != undefined ? props.content[0].type === \"img\" : \"empty\"\n  );\n  return (\n    <>\n      {props.content.map((x: any, i: number) =>\n        x.type === \"img\" ? (\n          <img src={x.src} style={x.style} alt=\"Image\" />\n        ) : (\n          React.createElement(\n            x.type,\n            {\n              style: x.style,\n              contentEditable:\n                notEditable.includes(x.type) || props.previewMode\n                  ? \"false\"\n                  : \"true\", // this is has to be like this because if not it doesnt detect the td only the table\n              key: i,\n              placeholder:\n                (notEditable.includes(x.type) && x.type !== \"div\") ||\n                !props.previewMode\n                  ? x.text\n                  : \"\",\n              content: \"\",\n              onInput: (e: any) => {\n                x.content = e.target.textContent;\n                console.log(\"ONINPUT\");\n              },\n              onClick: (e: any) => {\n                props.setSavedStyle(e.target.style);\n              },\n              onMouseDown: (e: any) => {\n                if (props.setItemIndex !== undefined) {\n                  props.setItemIndex(i);\n                }\n                increaseHoldIndex();\n                setCancelHover(false);\n              },\n              onMouseUp: (e: any) => {\n                setHoldCounter(-1);\n                setCancelHover(true);\n              },\n            },\n            x.children !== null &&\n              x.children !== undefined &&\n              x.children.length !== 0 ? (\n              <RenderContent1\n                content={x.children}\n                setModalEditPlacementActive={props.setModalEditPlacementActive}\n                previewMode={props.previewMode}\n                setSavedStyle={props.setSavedStyle}\n                setItemIndex={props.setItemIndex}\n                itemIndex={props.itemIndex}\n                savedStyle={props.savedStyle}\n              />\n            ) : (\n              x.content\n            )\n          )\n        )\n      )}\n    </>\n  );\n};\n\nexport default RenderContent;\n","/home/a/Documents/GitHub/web-maker/web-maker/src/DropdownItems.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/StylesTextAlign.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/StylesToggle.tsx",["129"],"import React, { useEffect, useState } from 'react'\n\nexport const StylesToggle = (props: any) => {\n\tconst [checkbox, setCheckbox] = useState(false)\n\n\tconst handleCheckbox = (event: any) => {\n\t\tif (event.target.checked) {\n\t\t\tprops.savedStyle[props.propertyToToggle] = props.on\n\t\t\tsetCheckbox(true)\n\t\t} else {\n\t\t\tprops.savedStyle[props.propertyToToggle] = props.off\n\t\t\tsetCheckbox(false)\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif (props.modalStateActive) {\n\t\t\tif (props.savedStyle[props.propertyToToggle] === props.on) {\n\t\t\t\tsetCheckbox(true)\n\t\t\t} else {\n\t\t\t\tsetCheckbox(false)\n\t\t\t}\n\t\t}\n\t}, [props.modalStateActive])\n\n\treturn (\n\t\t<div className=\"stylesBorderContainer\">\n\t\t\t<label className=\"checkboxContainer\">\n\t\t\t\t<input onClick={(e: any) => handleCheckbox(e)} onChange={() => console.log(\"toggled\")} type=\"checkbox\" checked={checkbox} className=\"checkbox\" ></input>\n\t\t\t\t<div className=\"checkboxFill\"></div>\n\t\t\t</label>\n\t\t\t<span> {props.nameOfStyle} </span>\n\t\t</div>\n\t)\n}\n\nexport default StylesToggle","/home/a/Documents/GitHub/web-maker/web-maker/src/RenderContent1.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/AddItem.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/AddImage.tsx",["130"],"import React, { useEffect } from \"react\";\nimport { image } from \"./defaultTypes.js\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst AddImage = (props: any) => {\n  const addImage = () => {\n    props.setAddImageOverlayActive(true);\n  };\n\n  useEffect(() => {\n    if (props.applyImageCount === 0) {\n      return;\n    }\n    var itemCopy: any = {};\n    Object.assign(itemCopy, image);\n    console.log(props);\n    itemCopy.text = props.text;\n    itemCopy.type = props.type;\n    itemCopy.src = props.src;\n    itemCopy.style = {\n      width: props.imageSizes.width + props.imageSizes.magnitude,\n      height: props.imageSizes.width + props.imageSizes.magnitude,\n      margin: \"1%\",\n    };\n    props.content.push(itemCopy);\n    props.setEditCount(props.editCount + 1);\n  }, [props.applyImageCount]);\n\n  return (\n    <>\n      <div onClick={addImage} className=\"dropdown\">\n        <FontAwesomeIcon size={\"2x\"} icon={props.icon} />\n      </div>\n    </>\n  );\n};\n\nexport default AddImage;\n","/home/a/Documents/GitHub/web-maker/web-maker/src/TextAlignCheckbox.tsx",["131"],"import React, { useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport const TextAlignCheckbox = (props: any) => {\n  const handleClick = () => {\n    props.setSelected(props.type);\n    props.savedStyle.textAlign = props.type;\n  };\n\n  useEffect(() => {\n    props.setSelected(props.savedStyle.textAlign);\n  }, [props.modalStateActive]);\n\n  return (\n    <label className=\"checkboxContainer\" onClick={handleClick}>\n      <input\n        type=\"checkbox\"\n        className=\"checkbox\"\n        checked={props.selected === props.type ? true : false}\n      />\n      <FontAwesomeIcon className=\"textAlignIcon\" icon={props.icon} />\n    </label>\n  );\n};\n\nexport default TextAlignCheckbox;\n","/home/a/Documents/GitHub/web-maker/web-maker/src/defaultTypes.js",[],["132","133"],"/home/a/Documents/GitHub/web-maker/web-maker/src/Login.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/requests.tsx",["134","135","136","137","138","139","140","141","142"],"import React, { useEffect, useState } from 'react'\n\nconst url = process.env.REACT_APP_REQUEST_URL\nconst headersContent = {}\nconsole.log(process.env)\n\nexport const SaveProject = (sentCount: number, token: string, content: object) => {\n\tconst [state, setState] = useState({ responseSavedStatus: 0, loadingSaved: true })\n\tconst thisURL = url + \"updateTokenObject\"\n\tuseEffect(() => {\n\t\tif (sentCount !== 0) {\n\t\t\tvar bodyContent = {\n\t\t\t\ttoken: token,\n\t\t\t\tobject: content\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ responseSavedStatus: state.responseSavedStatus, loadingSaved: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: number = await response.json()\n\t\t\t\tsetState({ responseSavedStatus: data, loadingSaved: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ responseSavedStatus: 0, loadingSaved: false })\n\t\t}\n\t}, [sentCount])\n\treturn state\n}\n\nexport const CreateProjectTokenRecovery = (recoverykey: string, createCount: number) => {\n\tconst [state, setState] = useState({ responseToken: \"\", loadingResponseToken: true })\n\tconst thisURL = url + \"insertTokenRecovery\"\n\tuseEffect(() => {\n\t\tconsole.log(createCount)\n\t\tif (createCount > 0 && createCount !== null && createCount !== undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\trecovery_key: recoverykey\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ responseToken: state.responseToken, loadingResponseToken: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: string = await response.json()\n\t\t\t\tsetState({ responseToken: data, loadingResponseToken: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ responseToken: \"\", loadingResponseToken: false })\n\t\t}\n\t}, [createCount])\n\treturn state\n}\n\nexport const CreateProjectTokenObject = (content: any, token: string) => {\n\tconst [state, setState] = useState({ responseStatus: \"\", loading: true })\n\tconst thisURL = url + \"insertTokenObject\"\n\tuseEffect(() => {\n\t\tif (token !== \"\" && token !== null && token !== undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\tcontent: content,\n\t\t\t\ttoken: token\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ responseStatus: state.responseStatus, loading: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: string = await response.json()\n\t\t\t\tsetState({ responseStatus: data, loading: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ responseStatus: \"\", loading: false })\n\t\t}\n\t}, [token])\n\treturn state\n}\n\nexport const GetTokenFromRecovery = (recoverykey: string, recoveryCount: number) => {\n\tconst [state, setState] = useState({ responseTokenFromRecovery: null, loading: true })\n\tconst thisURL = url + \"getTokenFromRecovery\"\n\tuseEffect(() => {\n\t\tif (recoveryCount > 0 && recoveryCount !== null && recoveryCount !== undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\trecovery_key: recoverykey\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ responseTokenFromRecovery: state.responseTokenFromRecovery, loading: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: any = await response.json()\n\t\t\t\tsetState({ responseTokenFromRecovery: data, loading: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ responseTokenFromRecovery: null, loading: false })\n\t\t}\n\t}, [recoveryCount])\n\treturn state\n}\n\n\nexport const GetContentFromToken = (token: string, getContentCount: number) => {\n\tconst [state, setState] = useState({ responseContent: [], loading: true })\n\tconst thisURL = url + \"getObjectFromToken\"\n\tuseEffect(() => {\n\t\tif (getContentCount > 0 && getContentCount !== null && getContentCount !== undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\ttoken: token\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ responseContent: state.responseContent, loading: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: [] = await response.json()\n\t\t\t\tsetState({ responseContent: data, loading: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ responseContent: [], loading: false })\n\t\t}\n\t}, [getContentCount])\n\treturn state\n}\n\nexport const GetFile = (token: string, getFileCount: number) => {\n\tconst [state, setState] = useState({ getFileStatus: 0, loadingGetFile: true })\n\tconst thisURL = url + \"exportIntoHTML\"\n\tuseEffect(() => {\n\t\tif (getFileCount > 0 && getFileCount !== null && getFileCount !== undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\ttoken: token\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ getFileStatus: state.getFileStatus, loadingGetFile: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: number = await response.json()\n\t\t\t\tsetState({ getFileStatus: data, loadingGetFile: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ getFileStatus: 500, loadingGetFile: false })\n\t\t}\n\t}, [getFileCount])\n\treturn state\n}\n\nexport const RemoveFile = (token: string, removeFileCount: number) => {\n\tconst [state, setState] = useState({ removeFileStatus: 0, loadingRemoveFile: true })\n\tconst thisURL = url + \"removeFile\"\n\tuseEffect(() => {\n\t\tif (removeFileCount > 0 && removeFileCount !== null && removeFileCount !== undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\ttoken: token\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ removeFileStatus: state.removeFileStatus, loadingRemoveFile: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: number = await response.json()\n\t\t\t\tsetState({ removeFileStatus: data, loadingRemoveFile: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ removeFileStatus: 500, loadingRemoveFile: false })\n\t\t}\n\t}, [removeFileCount])\n\treturn state\n}\n\n\nexport const CheckRecoveryKey = (recoveryKey: string, checkRecoveryKeyCount: number) => {\n\tconst [state, setState] = useState({ checkRecoveryKeyStatus: 0, loadingCheckRecoveryKey: true })\n\tconst thisURL = url + \"doesRecoveryKeyExist\"\n\tuseEffect(() => {\n\t\tif (checkRecoveryKeyCount > 0 && checkRecoveryKeyCount !== null && checkRecoveryKeyCount !== undefined) {\n\t\t\tvar bodyContent = {\n\t\t\t\trecovery_key: recoveryKey\n\t\t\t}\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: headersContent,\n\t\t\t\t// credentials: 'same-origin',\n\t\t\t\tbody: JSON.stringify(bodyContent)\n\t\t\t}\n\t\t\tsetState(state => ({ checkRecoveryKeyStatus: state.checkRecoveryKeyStatus, loadingCheckRecoveryKey: true }))\n\t\t\tconst loadData = async () => {\n\t\t\t\tconst response = await fetch(thisURL, requestOptions)\n\t\t\t\tvar data: number = await response.json()\n\t\t\t\tsetState({ checkRecoveryKeyStatus: data, loadingCheckRecoveryKey: false })\n\t\t\t}\n\t\t\tloadData()\n\t\t} else {\n\t\t\tsetState({ checkRecoveryKeyStatus: 0, loadingCheckRecoveryKey: false })\n\t\t}\n\t}, [checkRecoveryKeyCount])\n\treturn state\n}\n","/home/a/Documents/GitHub/web-maker/web-maker/src/AddTable.tsx",["143"],"import React, { useEffect } from 'react'\nimport { table } from './defaultTypes.js'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst AddTable = (props: any) => {\n\tconst addTable = () => {\n\t\tprops.setAddTableOverlayActive(true)\n\t}\n\n\tuseEffect(() => {\n\t\tif (props.applyTableCount === 0) {\n\t\t\treturn\n\t\t}\n\t\tvar itemCopy = JSON.parse(JSON.stringify(table)); //You cant use Object.assign because its not a deep copy\n\t\t\n\t\tconsole.log(\"TableSizes: \", props.tableSizes)\n\t\tfor (let i = 0; i < props.tableSizes.height; i++) {\n\t\t\titemCopy.children.push({\n\t\t\t\ttype: \"tr\",\n\t\t\t\ttext: \"Tr\",\n\t\t\t\tstyle: {\n\t\t\t\t\t// margin: \"1%\",\n\t\t\t\t\tborder: \"1px solid\"\n\t\t\t\t},\n\t\t\t\tchildren: []\n\t\t\t})\n\t\t\t\n\t\t\tfor (let n = 0; n < props.tableSizes.width; n++) {\n\t\t\t\titemCopy.children[i].children.push({\n\t\t\t\t\ttype: \"td\",\n\t\t\t\t\ttext: \"Td\",\n\t\t\t\t\tcontent: \"\",\n\t\t\t\t\tchildren: [],\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\twidth: `${100 / props.tableSizes.width - 1}`,\n\t\t\t\t\t\t// display: \"block\",\n\t\t\t\t\t\ttextAlign: \"center\",\n\t\t\t\t\t\t// margin: \"1%\",\n\t\t\t\t\t\tborder: \"1px solid\"\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\t// itemCopy.style.width = props.imageSizes.width + props.imageSizes.magnitude\n\t\t// itemCopy.style.height = props.imageSizes.height + props.imageSizes.magnitude\n\t\tconsole.log(\"itemcopy: \", itemCopy)\n\t\tprops.content.push(itemCopy)\n\t\t\n\t\tprops.setEditCount(props.editCount + 1)\n\t}, [props.applyTableCount])\n\tconsole.log(\"AddTable props.applyTableCount:\", props.applyTableCount)\n\n\treturn (\n\t\t<>\n\t\t\t<div onClick={addTable} className=\"dropdown\">\n\t\t\t\t<FontAwesomeIcon size={\"2x\"} icon={props.icon} />\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default AddTable","/home/a/Documents/GitHub/web-maker/web-maker/src/Alerts.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/AddTextCollumn.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/Modals/ModalImage.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/Modals/ModalTable.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/Modals/ModalImageSizeTable.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/Modals/ModalLogin.tsx",["144","145","146","147","148"],"import React, { useEffect, useState } from 'react';\nimport { SaveProject, CreateProjectTokenRecovery, CreateProjectTokenObject, GetTokenFromRecovery, GetContentFromToken, GetFile, RemoveFile, CheckRecoveryKey } from '../requests'\n\n\nconst ModalLogin = (props: any) => {\n\tconst textStyle = { fontSize: \"150%\", margin: \"1%\" }\n\tconst [waitingForTokenFromRecoveryKey, setWaitingForTokenFromRecoveryKey] = useState(false)\n\tconst [getFileCount, setGetFileCount] = useState(0)\n\tconst [removeFileCount, setRemoveFileCount] = useState(0)\n\tconst [getFileActivated, setGetFileActivated] = useState(false)\n\tconst [removeFileActivated, setRemoveFileActivated] = useState(false)\n\tconst [waitingForToken, setWaitingForToken] = useState(false)\n\tconst [recoveryKeyInputValue, setRecoveryKeyInputValue] = useState(\"\")\n\tconst [tokenFromRecoveryKeyInputValue, setTokenFromRecoveryKeyInputValue] = useState(\"\")\n\tconst [tokenInputValue, setTokenInputValue] = useState(\"\")\n\tconst [createProjectActivated, setCreateProjectActivated] = useState(false)\n\tconst [recoverTokenActivated, setRecoverTokenActivated] = useState(false)\n\tconst [importProjectActivated, setImportProjectActivated] = useState(false)\n\tconst [sentCount, setSentCount] = useState(0)\n\tconst [createCount, setCreateCount] = useState(0)\n\tconst [getContentCount, setGetContentCount] = useState(0)\n\tconst [recoverTokenCount, setRecoverTokenCount] = useState(0)\n\tconst [checkRecoveryKeyCount, setCheckRecoveryKeyCount] = useState(0)\n\tconst [recoveryTooLong, setRecoveryTooLong] = useState(false)\n\tconst [saveClicked, setSaveClicked] = useState(false)\n\tconst [tokenToSet, setTokenToSet] = useState(\"\")\n\tvar { responseSavedStatus, loadingSaved } = SaveProject(sentCount, props.token, props.content)\n\tvar { responseToken, loadingResponseToken } = CreateProjectTokenRecovery(recoveryKeyInputValue, createCount)\n\tCreateProjectTokenObject(props.content, props.token)\n\tvar { responseTokenFromRecovery } = GetTokenFromRecovery(tokenFromRecoveryKeyInputValue, recoverTokenCount)\n\tvar { loadingGetFile } = GetFile(props.token, getFileCount)\n\tRemoveFile(props.token, removeFileCount)\n\tvar { responseContent } = GetContentFromToken(tokenInputValue, getContentCount)\n\tvar { checkRecoveryKeyStatus, loadingCheckRecoveryKey } = CheckRecoveryKey(recoveryKeyInputValue, checkRecoveryKeyCount)\n\n\tuseEffect(() => {\n\t\tif (responseContent !== null && responseContent !== undefined && responseContent.length !== null) {\n\t\t\tprops.setContent(responseContent)\n\t\t}\n\t}, [responseContent])\n\n\tuseEffect(() => {\n\t\tif (!loadingCheckRecoveryKey && checkRecoveryKeyStatus === 200) {\n\t\t\tconsole.log(\"Cretae project\")\n\t\t\tcreateProject()\n\t\t}\n\t}, [checkRecoveryKeyStatus, loadingCheckRecoveryKey])\n\n\tuseEffect(() => {\n\t\tif (!loadingResponseToken && responseToken !== null && responseToken !== \"\") {\n\t\t\tsetTokenToSet(responseToken)\n\t\t}\n\t}, [responseToken])\n\n\tuseEffect(() => {\n\t\tif (!props.loginModalState) {\n\t\t\tprops.setToken(tokenToSet)\n\t\t}\n\t}, [tokenToSet, props.loginModalState])\n\n\n\tconst saveOnClick = () => {\n\t\tsetSentCount(sentCount + 1)\n\t\tsetSaveClicked(true)\n\t}\n\n\n\tconst createProject = () => {\n\t\tif (recoveryKeyInputValue.length > 29) {\n\t\t\tsetRecoveryTooLong(true)\n\t\t} else {\n\t\t\tsetCreateCount(createCount + 1)\n\t\t\tsetWaitingForToken(true)\n\t\t}\n\t}\n\n\tconst importProject = () => {\n\t\tsetGetContentCount(getContentCount + 1)\n\t\t// props.setToken(tokenInputValue)\n\t\tsetTokenToSet(tokenInputValue)\n\t\thideModal()\n\t}\n\n\n\tconst hideModal = () => {\n\t\tprops.setLoginModalStateActive(false)\n\t\tsetRecoveryTooLong(false)\n\t\tsetSaveClicked(false)\n\t\tsetCreateProjectActivated(false)\n\t\tsetWaitingForToken(false)\n\t\tprops.setToken(tokenToSet)\n\t\tsetWaitingForTokenFromRecoveryKey(false)\n\t\tsetImportProjectActivated(false)\n\t\tsetRecoverTokenActivated(false)\n\t\tsetGetFileActivated(false)\n\t\tif (removeFileActivated) {\n\t\t\tsetRemoveFileCount(removeFileCount + 1)\n\t\t\tsetRemoveFileActivated(false)\n\t\t}\n\t}\n\tconsole.log(\"Get file activated\", getFileActivated)\n\tconsole.log(\"Waiting for token\", getFileActivated)\n\tconst getFile = () => {\n\t\tsetGetFileActivated(true)\n\t\tsetGetFileCount(getFileCount + 1)\n\t\tsetRemoveFileActivated(true)\n\t}\n\n\tconst recoverToken = () => {\n\t\tsetRecoverTokenCount(recoverTokenCount + 1)\n\t\tsetWaitingForTokenFromRecoveryKey(true)\n\t}\n\n\tconsole.log(\"Token: \", props.token)\n\tconsole.log(props.token !== \"\", !waitingForToken, getFileActivated)\n\n\tif (props.token === \"\" && !createProjectActivated && !importProjectActivated) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal modal ${props.loginModalStateActive ? \"modalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> Create new project </span>\n\t\t\t\t\t<button className=\"preview loginInput loginButton\" onClick={() => setCreateProjectActivated(true)}> Create </button>\n\t\t\t\t\t<span style={textStyle}> Import existing project </span>\n\t\t\t\t\t<button className=\"preview loginInput loginButton\" onClick={() => setImportProjectActivated(true)}> Import </button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t} else if (props.token !== \"\" && !waitingForToken && !getFileActivated) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal modal ${props.loginModalStateActive ? \"modalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> Save your current project </span>\n\t\t\t\t\t<button onClick={saveOnClick} className=\"preview loginInput loginButton\"> Save </button>\n\t\t\t\t\t<span className={`informationDiv ${responseSavedStatus === 200 && !loadingSaved && saveClicked ? \"unhide\" : \"hide\"}`}> Saved successfully </span>\n\t\t\t\t\t<span className={`alertDiv ${responseSavedStatus === 500 && !loadingSaved && saveClicked ? \"unhide\" : \"hide\"}`}> Unsuccessfull save, please try again later </span>\n\t\t\t\t\t<button type=\"button\" onClick={getFile} className=\"preview loginInput loginButton\"> Get html file </button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t} else if (props.token !== \"\" && !waitingForToken && getFileActivated) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal modal ${props.loginModalStateActive ? \"modalActive\" : \"\"}`}>\n\t\t\t\t\t<span> {loadingGetFile ? \"Loading file\" : \"\"} </span>\n\t\t\t\t\t<a href={`temp-${props.token}.html`} className={`preview loginInput loginButton ${loadingGetFile ? \"hide\" : \"unhide\"}`} download=\"index.html\" > Download file </a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t} else if (props.token === \"\" && createProjectActivated && !waitingForToken) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal modal ${props.loginModalStateActive ? \"modalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> Insert recovery key in case you forget your token </span>\n\t\t\t\t\t<input type=\"text\" className=\"input loginInput\" placeholder=\"Recovery key\" value={recoveryKeyInputValue} onChange={(e: any) => setRecoveryKeyInputValue(e.target.value)} />\n\t\t\t\t\t<div className=\"informationDiv recoveryTooLong\"> Make sure you save this recovery key. You will need the key in case you forget your token.</div>\n\t\t\t\t\t<div className={`informationDiv ${recoveryTooLong ? \"alertDiv unhide\" : \"hide\"}`}> You recovery key is too long, make sure its under 30 carachters </div>\n\t\t\t\t\t<div className={`alertDiv ${checkRecoveryKeyStatus === 500 ? \"unhide\" : \"hide\"}`}> The recovery key is already taken </div>\n\t\t\t\t\t<button onClick={() => setCheckRecoveryKeyCount(checkRecoveryKeyCount + 1)} className=\"preview loginInput loginButton\"> Create </button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t} else if (createProjectActivated && waitingForToken) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal modal ${props.loginModalStateActive ? \"modalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> This is your project token </span>\n\t\t\t\t\t<span>{responseToken != null ? responseToken : \"\"}</span>\n\t\t\t\t\t<div className={`informationDiv `}> Make sure you save this token. You will need the key to edit you project the next time you want to edit it.</div>\n\t\t\t\t\t<button onClick={hideModal} className=\"preview loginButton\" style={{ margin: \"1%\" }}> Continue </button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t} else if (props.token === \"\" && importProjectActivated && !recoverTokenActivated) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal modal ${props.loginModalStateActive ? \"modalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> Import your project with your project token </span>\n\t\t\t\t\t<div className={`informationDiv `}> If you cant remember your token click recover token. You will be able to recover your token with your recovery key</div>\n\t\t\t\t\t<input type=\"text\" className=\"input loginInput\" placeholder=\"Token\" value={tokenInputValue} onChange={(e: any) => setTokenInputValue(e.target.value)} />\n\t\t\t\t\t<div style={{ display: \"flex\", width: \"50%\", justifyContent: \"center\" }}>\n\t\t\t\t\t\t<button onClick={() => setRecoverTokenActivated(true)} className=\"preview loginInput loginButton\" > Recovery </button>\n\t\t\t\t\t\t<button onClick={importProject} className=\"preview loginInput loginButton\" > Import </button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t} else if (props.token === \"\" && importProjectActivated && recoverTokenActivated && !waitingForTokenFromRecoveryKey) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal modal ${props.loginModalStateActive ? \"modalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> Introduce recovery key to get your token </span>\n\t\t\t\t\t<div className=\"informationDiv\"> This recovery key has to be unique so try with a personal phrase or something like that. </div>\n\t\t\t\t\t<input type=\"text\" className=\"input loginInput\" placeholder=\"Recovery key\" value={tokenFromRecoveryKeyInputValue} onChange={(e: any) => setTokenFromRecoveryKeyInputValue(e.target.value)} />\n\t\t\t\t\t<button onClick={recoverToken} className=\"preview loginInput loginButton\"> Submit </button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t} else if (props.token === \"\" && importProjectActivated && recoverTokenActivated && waitingForTokenFromRecoveryKey) {\n\t\treturn (\n\t\t\t<div className=\"loginModalContainer\">\n\t\t\t\t<div className={`overlay ${props.loginModalStateActive ? \"overlayActive\" : \"\"}`} onClick={hideModal}></div>\n\t\t\t\t<div className={`loginModal modal ${props.loginModalStateActive ? \"modalActive\" : \"\"}`}>\n\t\t\t\t\t<span style={textStyle}> This is your project token </span>\n\t\t\t\t\t<span>{responseTokenFromRecovery !== null ? responseTokenFromRecovery == 500 ? \"Wrong recovery key\" : responseTokenFromRecovery : \"\"}</span>\n\t\t\t\t\t<div className={`informationDiv`}> Make sure you save this token. You will need the key to edit you project the next time you want to edit it.</div>\n\t\t\t\t\t<button onClick={hideModal} className=\"preview loginButton loginInput\"> Continue </button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\treturn (<>hi </>)\n}\n\n\nexport default ModalLogin;\n","/home/a/Documents/GitHub/web-maker/web-maker/src/Modals/Modal.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/Modals/ModalEditPlacement.tsx",[],"/home/a/Documents/GitHub/web-maker/web-maker/src/exceptionItems.js",[],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":17,"nodeType":"155","messageId":"156","endLine":1,"endColumn":25},{"ruleId":"149","replacedBy":"157"},{"ruleId":"151","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":25,"column":5,"nodeType":"161","endLine":25,"endColumn":18,"suggestions":"162"},{"ruleId":"163","severity":1,"message":"164","line":31,"column":31,"nodeType":"165","messageId":"166","endLine":31,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":34,"column":65,"nodeType":"169","endLine":34,"endColumn":112},{"ruleId":"159","severity":1,"message":"170","line":24,"column":5,"nodeType":"161","endLine":24,"endColumn":29,"suggestions":"171"},{"ruleId":"159","severity":1,"message":"172","line":22,"column":5,"nodeType":"161","endLine":22,"endColumn":28,"suggestions":"173"},{"ruleId":"159","severity":1,"message":"174","line":12,"column":6,"nodeType":"161","endLine":12,"endColumn":30,"suggestions":"175"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"176","line":1,"column":8,"nodeType":"155","messageId":"156","endLine":1,"endColumn":13},{"ruleId":"159","severity":1,"message":"177","line":32,"column":5,"nodeType":"161","endLine":32,"endColumn":16,"suggestions":"178"},{"ruleId":"159","severity":1,"message":"179","line":61,"column":5,"nodeType":"161","endLine":61,"endColumn":18,"suggestions":"180"},{"ruleId":"159","severity":1,"message":"181","line":90,"column":5,"nodeType":"161","endLine":90,"endColumn":12,"suggestions":"182"},{"ruleId":"159","severity":1,"message":"179","line":118,"column":5,"nodeType":"161","endLine":118,"endColumn":20,"suggestions":"183"},{"ruleId":"159","severity":1,"message":"184","line":147,"column":5,"nodeType":"161","endLine":147,"endColumn":22,"suggestions":"185"},{"ruleId":"159","severity":1,"message":"184","line":175,"column":5,"nodeType":"161","endLine":175,"endColumn":19,"suggestions":"186"},{"ruleId":"159","severity":1,"message":"184","line":203,"column":5,"nodeType":"161","endLine":203,"endColumn":22,"suggestions":"187"},{"ruleId":"159","severity":1,"message":"188","line":232,"column":5,"nodeType":"161","endLine":232,"endColumn":28,"suggestions":"189"},{"ruleId":"159","severity":1,"message":"174","line":50,"column":5,"nodeType":"161","endLine":50,"endColumn":28,"suggestions":"190"},{"ruleId":"159","severity":1,"message":"174","line":40,"column":5,"nodeType":"161","endLine":40,"endColumn":22,"suggestions":"191"},{"ruleId":"159","severity":1,"message":"192","line":47,"column":5,"nodeType":"161","endLine":47,"endColumn":54,"suggestions":"193"},{"ruleId":"159","severity":1,"message":"194","line":53,"column":5,"nodeType":"161","endLine":53,"endColumn":20,"suggestions":"195"},{"ruleId":"159","severity":1,"message":"174","line":59,"column":5,"nodeType":"161","endLine":59,"endColumn":40,"suggestions":"196"},{"ruleId":"163","severity":1,"message":"197","line":211,"column":76,"nodeType":"165","messageId":"166","endLine":211,"endColumn":78},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["198"],["199"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cancelHover', 'increaseHoldIndex', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["200"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'props.on', 'props.propertyToToggle', and 'props.savedStyle'. Either include them or remove the dependency array.",["201"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["202"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["203"],"'React' is defined but never used.","React Hook useEffect has missing dependencies: 'content', 'thisURL', and 'token'. Either include them or remove the dependency array.",["204"],"React Hook useEffect has missing dependencies: 'recoverykey' and 'thisURL'. Either include them or remove the dependency array.",["205"],"React Hook useEffect has missing dependencies: 'content' and 'thisURL'. Either include them or remove the dependency array.",["206"],["207"],"React Hook useEffect has missing dependencies: 'thisURL' and 'token'. Either include them or remove the dependency array.",["208"],["209"],["210"],"React Hook useEffect has missing dependencies: 'recoveryKey' and 'thisURL'. Either include them or remove the dependency array.",["211"],["212"],["213"],"React Hook useEffect has a missing dependency: 'createProject'. Either include it or remove the dependency array.",["214"],"React Hook useEffect has a missing dependency: 'loadingResponseToken'. Either include it or remove the dependency array.",["215"],["216"],"Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},"Update the dependencies array to be: [cancelHover, holdCounter, increaseHoldIndex, props]",{"range":"251","text":"252"},"Update the dependencies array to be: [props.modalStateActive, props.on, props.propertyToToggle, props.savedStyle]",{"range":"253","text":"254"},"Update the dependencies array to be: [props, props.applyImageCount]",{"range":"255","text":"256"},"Update the dependencies array to be: [props, props.modalStateActive]",{"range":"257","text":"258"},"Update the dependencies array to be: [content, sentCount, thisURL, token]",{"range":"259","text":"260"},"Update the dependencies array to be: [createCount, recoverykey, thisURL]",{"range":"261","text":"262"},"Update the dependencies array to be: [content, thisURL, token]",{"range":"263","text":"264"},"Update the dependencies array to be: [recoveryCount, recoverykey, thisURL]",{"range":"265","text":"266"},"Update the dependencies array to be: [getContentCount, thisURL, token]",{"range":"267","text":"268"},"Update the dependencies array to be: [getFileCount, thisURL, token]",{"range":"269","text":"270"},"Update the dependencies array to be: [removeFileCount, thisURL, token]",{"range":"271","text":"272"},"Update the dependencies array to be: [checkRecoveryKeyCount, recoveryKey, thisURL]",{"range":"273","text":"274"},"Update the dependencies array to be: [props, props.applyTableCount]",{"range":"275","text":"276"},"Update the dependencies array to be: [props, responseContent]",{"range":"277","text":"278"},"Update the dependencies array to be: [checkRecoveryKeyStatus, createProject, loadingCheckRecoveryKey]",{"range":"279","text":"280"},"Update the dependencies array to be: [loadingResponseToken, responseToken]",{"range":"281","text":"282"},"Update the dependencies array to be: [tokenToSet, props.loginModalState, props]",{"range":"283","text":"284"},[679,692],"[cancelHover, holdCounter, increaseHoldIndex, props]",[578,602],"[props.modalStateActive, props.on, props.propertyToToggle, props.savedStyle]",[720,743],"[props, props.applyImageCount]",[347,371],"[props, props.modalStateActive]",[1022,1033],"[content, sentCount, thisURL, token]",[2008,2021],"[createCount, recoverykey, thisURL]",[2899,2906],"[content, thisURL, token]",[3866,3881],"[recoveryCount, recoverykey, thisURL]",[4773,4790],"[getContentCount, thisURL, token]",[5675,5689],"[getFileCount, thisURL, token]",[6612,6629],"[removeFileCount, thisURL, token]",[7664,7687],"[checkRecoveryKeyCount, recoveryKey, thisURL]",[1331,1354],"[props, props.applyTableCount]",[2479,2496],"[props, responseContent]",[2646,2695],"[checkRecoveryKeyStatus, createProject, loadingCheckRecoveryKey]",[2838,2853],"[loadingResponseToken, responseToken]",[2945,2980],"[tokenToSet, props.loginModalState, props]"]