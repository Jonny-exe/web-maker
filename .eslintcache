[{"/home/a/Documents/GitHub/web-maker/src/App.tsx":"1","/home/a/Documents/GitHub/web-maker/src/Preview.tsx":"2","/home/a/Documents/GitHub/web-maker/src/index.tsx":"3","/home/a/Documents/GitHub/web-maker/src/reportWebVitals.ts":"4","/home/a/Documents/GitHub/web-maker/src/AddButton.tsx":"5","/home/a/Documents/GitHub/web-maker/src/DropdownMenu.tsx":"6","/home/a/Documents/GitHub/web-maker/src/DropdownItem.tsx":"7","/home/a/Documents/GitHub/web-maker/src/DropdownItems.tsx":"8","/home/a/Documents/GitHub/web-maker/src/RenderContent.tsx":"9","/home/a/Documents/GitHub/web-maker/src/RenderContent1.tsx":"10","/home/a/Documents/GitHub/web-maker/src/defaultTypes.js":"11","/home/a/Documents/GitHub/web-maker/src/AddItem.tsx":"12","/home/a/Documents/GitHub/web-maker/src/Edit.tsx":"13","/home/a/Documents/GitHub/web-maker/src/TextAlignCheckbox.tsx":"14","/home/a/Documents/GitHub/web-maker/src/Modal.tsx":"15","/home/a/Documents/GitHub/web-maker/src/StylesTextAlign.tsx":"16","/home/a/Documents/GitHub/web-maker/src/StylesToggle.tsx":"17","/home/a/Documents/GitHub/web-maker/src/AddImage.tsx":"18","/home/a/Documents/GitHub/web-maker/src/ModalImage.tsx":"19","/home/a/Documents/GitHub/web-maker/src/ModalImageSizeTable.tsx":"20"},{"size":3196,"mtime":1608725882150,"results":"21","hashOfConfig":"22"},{"size":444,"mtime":1608477065438,"results":"23","hashOfConfig":"22"},{"size":500,"mtime":1608415433882,"results":"24","hashOfConfig":"22"},{"size":425,"mtime":1608415433882,"results":"25","hashOfConfig":"22"},{"size":1835,"mtime":1608760565616,"results":"26","hashOfConfig":"22"},{"size":132,"mtime":1608471384363,"results":"27","hashOfConfig":"22"},{"size":172,"mtime":1608478071770,"results":"28","hashOfConfig":"22"},{"size":1308,"mtime":1608744552565,"results":"29","hashOfConfig":"22"},{"size":1171,"mtime":1608732721970,"results":"30","hashOfConfig":"22"},{"size":399,"mtime":1608486851586,"results":"31","hashOfConfig":"22"},{"size":1080,"mtime":1608743649121,"results":"32","hashOfConfig":"22"},{"size":531,"mtime":1608743307043,"results":"33","hashOfConfig":"22"},{"size":367,"mtime":1608802497251,"results":"34","hashOfConfig":"22"},{"size":701,"mtime":1608718675970,"results":"35","hashOfConfig":"22"},{"size":1162,"mtime":1608803714392,"results":"36","hashOfConfig":"22"},{"size":1067,"mtime":1608719211480,"results":"37","hashOfConfig":"22"},{"size":926,"mtime":1608803733573,"results":"38","hashOfConfig":"22"},{"size":1087,"mtime":1608744771478,"results":"39","hashOfConfig":"22"},{"size":1402,"mtime":1608759702066,"results":"40","hashOfConfig":"22"},{"size":1248,"mtime":1608760588973,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"1waducl",{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"45"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"45"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"45"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"45"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"45"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"45"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"45"},"/home/a/Documents/GitHub/web-maker/src/App.tsx",["97","98","99","100","101","102","103","104"],"import React, { useState } from 'react';\nimport './App.css';\nimport Preview from './Preview'\nimport AddButton from './AddButton'\nimport Modal from './Modal'\nimport DropdownMenu from './DropdownMenu'\nimport RenderContent from './RenderContent'\n// import Styles from './StylesTextAlign'\nimport Edit from './Edit'\n\nfunction App() {\n  // const [inputValue, setInputValue] = useState(\"\")\n  const [modalStateActive, setModalStateActive] = useState(false)\n  const [addButtonStateActive, setAddButtonStateActive] = useState(false)\n  const [divCount, setDivCount] = useState(0)\n  const [displayButtons, setDisplayButtons] = useState(false)\n  const [array, setArray] = useState([\"\"])\n  const [input, setInput] = useState(\"\")\n  const [html, setHtml] = useState(\"\")\n  const [savedInput, setSavedInput] = useState({ textContent: \"\" })\n  const [savedIndex, setSavedIndex] = useState(1)\n  const [savedStyle, setSavedStyle] = useState({ textAlign: \"\", borderStyle: \"\"})\n  const [editCount, setEditCount] = useState(0)\n  const [previewMode, setPreviewMode] = useState(false)\n  const [content, setContent] = useState([])\n\n  const addToDivCount = () => {\n    setDivCount(divCount + 1)\n    var newArray: string[]\n    array.push(input)\n    var newArray = array\n    setArray(newArray)\n  }\n\n  // const handleInput = (event: any) => {\n  //   setInput(event.target.value)\n  //   savedInput.textContent = event.target.value\n  // }\n\n  const handleDiv = (content: string, index: number, event: any) => {\n    setInput(content)\n    setSavedIndex(index)\n    setSavedStyle(event.target.style)\n    setSavedInput(event.target)\n    setDisplayButtons(true)\n  }\n\n  // const editDiv = () => {\n  //   var newArray = array\n  //   newArray[savedIndex] = input\n  //   setArray(newArray)\n  //   setEditCount(editCount + 1)\n  //   setDisplayButtons(false)\n  //   savedStyle.borderStyle = \"none\"\n  //   setSavedInput({textContent: \"\"}) // This cant be done savedInput.textContent because it is a reference to event.target.textContent\n  //   setInput(\"\")\n  // }\n\n\n  const logStyle = (e: any) => {\n    console.log(e.target.style.borderStyle)\n  }\n\n  const handlePreview = (bool: boolean) => {\n    setPreviewMode(bool)\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"tools\">\n        <Preview previewMode={previewMode} handlePreview={setPreviewMode} />\n        <Edit previewMode={previewMode} savedStyle={savedStyle} setModalStateActive={setModalStateActive} displayButtons={displayButtons} />\n        {/* <Styles previewMode={previewMode} displayButtons={displayButtons} /> */}\n        <AddButton content={content} setContent={setContent} addButtonStateActive={addButtonStateActive} setAddButtonStateActive={setAddButtonStateActive} editCount={editCount} setEditCount={setEditCount} previewMode={previewMode} addToDivCount={addToDivCount} />\n      </div>\n      <Modal input={input} setInput={setInput} savedStyle={savedStyle} savedInput={savedInput} previewMode={previewMode} modalStateActive={modalStateActive} setModalStateActive={setModalStateActive} />\n      <RenderContent setDisplayButtons={setDisplayButtons} setSavedStyle={setSavedStyle} savedStyle={savedStyle} content={content} />\n    </div>\n  );\n}\n\nexport default App;\n",["105","106"],"/home/a/Documents/GitHub/web-maker/src/Preview.tsx",["107","108"],"import react, {useState} from 'react';\n\nexport const Preveiw = (props: any) => {\n  return (\n    <div className=\"preview\">\n      <button className={`preview ${props.previewMode ? \"previewMode\" : \"\"}`} onClick={() => props.handlePreview(true)}> Preview </button>\n      <button className={`preview ${props.previewMode ? \"\" : \"previewMode\"}`} onClick={() => props.handlePreview(false)}> UnPreview </button>\n    </div>\n  );\n}\n\nexport default Preveiw","/home/a/Documents/GitHub/web-maker/src/index.tsx",[],"/home/a/Documents/GitHub/web-maker/src/reportWebVitals.ts",[],"/home/a/Documents/GitHub/web-maker/src/AddButton.tsx",["109"],"import React, { useEffect, useState } from 'react';\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport DropdownItems from './DropdownItems'\nimport ModalImage from './ModalImage'\n\n\n/* <FontAwesomeIcon icon={faPlusSquare} style={{ width: \"\" }} onClick={props.addToDivCount} className={props.previewMode ? \"previewMode\" : \"\"} /> */\nconst AddButton = (props: any) => {\n  const [imageSrc, setImageSrc] = useState(\"\")\n  const [menuState, setMenuState] = useState(false)\n  const [addImageOverlayActive, setAddImageOverlayActive] = useState(false)\n  const [applyCount, setApplyCount] = useState(0)\n  const [imageSizes, setImageSizes] = useState({ width: 1, height: 1, magnitude: \"\" })\n  console.log(imageSizes)\n\n  const handleClick = () => {\n    setMenuState(!menuState)\n  }\n\n  return (\n    <div className=\"addButtonContainer\">\n      <div className=\"\">\n        <FontAwesomeIcon size={\"2x\"} icon={faPlus} className={`addButton ${props.previewMode ? \"previewMode\" : \"\"}`} onClick={handleClick} />\n      </div>\n      <DropdownItems imageSrc={imageSrc} imageSizes={imageSizes} applyCount={applyCount} content={props.content} setContent={props.setContent} editCount={props.editCount} setEditCount={props.setEditCount} setAddImageOverlayActive={setAddImageOverlayActive} menuState={menuState} />\n      <div className={`overlay addButtonOverlay ${menuState ? \"overlayActive addButtonOverlayActive\" : \"\"}`} onClick={() => setMenuState(false)}></div>\n      <ModalImage imageSrc={imageSrc} setImageSrc={setImageSrc} imageSizes={imageSizes} setImageSizes={setImageSizes} setApplyCount={setApplyCount} applyCount={applyCount} addImageOverlayActive={addImageOverlayActive} setAddImageOverlayActive={setAddImageOverlayActive} />\n    </div>\n  );\n}\n\n\nexport default AddButton;\n","/home/a/Documents/GitHub/web-maker/src/DropdownMenu.tsx",[],"/home/a/Documents/GitHub/web-maker/src/DropdownItem.tsx",[],["110","111"],"/home/a/Documents/GitHub/web-maker/src/DropdownItems.tsx",["112"],"import React from 'react'\nimport DropdownItem from './DropdownItem'\nimport AddItem from './AddItem'\nimport AddImage from './AddImage'\n// import types from \"./types.js\"\n\nexport const DropdownItems = (props: any) => {\n\treturn (\n\t\t<div className={`dropdownMenuItems ${props.menuState ? \"showDropdownItems\" : \"notShowDropdownItems\"}`}>\n\t\t\t<AddItem type={\"h1\"} text={\"Title\"} content={props.content} setContent={props.setContent} editCount={props.editCount} setEditCount={props.setEditCount} />\n\t\t\t<AddItem type={\"h2\"} text={\"SubTitle\"} content={props.content} setContent={props.setContent} editCount={props.editCount} setEditCount={props.setEditCount} />\n\t\t\t<AddItem type={\"h3\"} text={\"Heading\"} content={props.content} setContent={props.setContent} editCount={props.editCount} setEditCount={props.setEditCount} />\n\t\t\t<AddItem type={\"p\"} text={\"Text\"} content={props.content} setContent={props.setContent} editCount={props.editCount} setEditCount={props.setEditCount} />\n\t\t\t<AddImage type={\"img\"} text={\"Image\"} imageSizes={props.imageSizes} src={props.imageSrc} applyCount={props.applyCount} content={props.content} setContent={props.setContent} editCount={props.editCount} setEditCount={props.setEditCount} setAddImageOverlayActive={props.setAddImageOverlayActive}/>\n\t\t</div>\n\t)\n}\n\nexport default DropdownItems","/home/a/Documents/GitHub/web-maker/src/RenderContent.tsx",["113","114","115","116","117","118"],"import React, { useState } from 'react'\nimport RenderContent1 from './RenderContent1'\nimport App from \"./App\"\n\nexport const RenderContent = (props: any) => {\n\treturn (\n\t\t<div className=\"render\">\n\t\t\t{console.log(props.content)}\n\t\t\t{\n\t\t\t\tprops.content.map((x: any, i: number) => (\n\t\t\t\t\t// Images must be done separatly\n\t\t\t\t\tx.type == \"img\" ? <img style={x.style} src={x.src} alt=\"Image\"></img>: \n\t\t\t\t\tReact.createElement(x.type, {\n            style: x.style,\n            contentEditable: \"true\",\n            placeholder: x.text,\n\t\t\t\t\t\tonClick: (e: any) => {\n\t\t\t\t\t\t\tconsole.log(x)\n\t\t\t\t\t\t\t// props.handleDiv(e.target.innerText, i, e) // this could be set to e.target.innerHTML to use \" text \"\n\t\t\t\t\t\t\tprops.setDisplayButtons(true)\n\t\t\t\t\t\t\t// props.savedStyle.borderStyle = \"\"\n\t\t\t\t\t\t\t// e.target.style.border = \"2px solid black\"\n\t\t\t\t\t\t\t// e.target.style.borderRadius = \"5px\"\n\t\t\t\t\t\t\tprops.setSavedStyle(e.target.style)\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfocusout:  (e: any) => {\n\t\t\t\t\t\t\tprops.setDisplayButtons(false)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\tx.children.length != 0 && x.children != undefined ? <RenderContent1 content={x.children} /> : \"\",\n\t\t\t\t\t)\n\t\t\t\t))\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default RenderContent","/home/a/Documents/GitHub/web-maker/src/RenderContent1.tsx",["119","120","121","122"],"import React, { useState } from 'react'\nimport RenderContent from './RenderContent'\n\nexport const RenderContent1 = (props: any) => {\n\n\treturn (\n\t\t<div className=\"render\">\n\t\t\t{\n\t\t\t\tprops.content.map((x: any) =>\n\t\t\t\t(\n\t\t\t\t\tx.type == \"span\" ? <span style={x.style}> {x.text} </span> : x.type == \"div\" ? <div style={x.style}> {x.text} </div> : \"\"\n\t\t\t\t))\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default RenderContent1","/home/a/Documents/GitHub/web-maker/src/defaultTypes.js",[],["123","124"],"/home/a/Documents/GitHub/web-maker/src/AddItem.tsx",["125"],"import React, { useState } from 'react'\nimport { item } from './defaultTypes.js'\n\nconst AddItem = (props: any) => {\n\tconst addTitle = () => {\n\t\tconsole.log(props.content)\n\t\t// var content = props.content\n\t\tvar itemCopy: any = {}\n\t\tObject.assign(itemCopy, item)\n\t\tconsole.log(props)\n\t\titemCopy.text = props.text\n\t\titemCopy.type = props.type\n\t\tprops.content.push(itemCopy)\n\t\tprops.setEditCount(props.editCount + 1)\n\t}\n\treturn (\n\t\t<div onClick={addTitle} className=\"dropdown\">\n\t\t\tAdd {props.text}\n\t\t</div>\n\t)\n}\n\nexport default AddItem","/home/a/Documents/GitHub/web-maker/src/Edit.tsx",["126"],"/home/a/Documents/GitHub/web-maker/src/TextAlignCheckbox.tsx",["127","128","129","130","131","132","133"],"import React, { useEffect, useState } from 'react'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAlignCenter, faAlignJustify, faAlignLeft, faAlignRight } from '@fortawesome/free-solid-svg-icons';\n\nexport const TextAlignCheckbox = (props: any) => {\n  const handleClick = () => {\n    props.setSelected(props.type)\n    props.savedStyle.textAlign = props.type\n  }\n  return (\n    <label className=\"checkboxContainer\" onClick={handleClick}>\n      <input type=\"checkbox\" className=\"checkbox\" checked={props.selected == props.type ? true : false}></input>\n      <FontAwesomeIcon className=\"textAlignIcon\" icon={props.icon} />\n    </label>\n  )\n}\n\nexport default TextAlignCheckbox","/home/a/Documents/GitHub/web-maker/src/Modal.tsx",["134","135"],"/home/a/Documents/GitHub/web-maker/src/StylesTextAlign.tsx",["136","137"],"import React, { useState } from 'react'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAlignCenter, faAlignJustify, faAlignLeft, faAlignRight } from '@fortawesome/free-solid-svg-icons';\nimport TextAlignCheckbox from './TextAlignCheckbox'\nimport { preProcessFile } from 'typescript';\n\nexport const StylesTextAlign = (props: any) => {\n  const [selected, setSelected] = useState(\"\")\n\n  return (\n    <div className=\"textAlignContainer\">\n      <TextAlignCheckbox selected={selected} setSelected={setSelected} savedStyle={props.savedStyle} icon={faAlignJustify} type={\"justify\"}/>\n      <TextAlignCheckbox selected={selected} setSelected={setSelected} savedStyle={props.savedStyle} icon={faAlignCenter} type={\"center\"}/>\n      <TextAlignCheckbox selected={selected} setSelected={setSelected} savedStyle={props.savedStyle} icon={faAlignLeft} type={\"left\"}/>\n      <TextAlignCheckbox selected={selected} setSelected={setSelected} savedStyle={props.savedStyle} icon={faAlignRight} type={\"right\"}/>\n    </div>\n  )\n}\n\nexport default StylesTextAlign","/home/a/Documents/GitHub/web-maker/src/StylesToggle.tsx",["138","139"],"/home/a/Documents/GitHub/web-maker/src/AddImage.tsx",["140","141","142"],"import React, { useEffect, useState } from 'react'\nimport { image } from './defaultTypes.js'\n\nconst AddImage = (props: any) => {\n\tconst addImage = () => {\n\t\tprops.setAddImageOverlayActive(true)\n\t}\n\n\tuseEffect(() => {\n\t\tif (props.applyCount == 0) {\n\t\t\treturn\n\t\t}\n\t\tconsole.log(props.content)\n\t\t// var content = props.content\n\t\tvar itemCopy: any = {}\n\t\tObject.assign(itemCopy, image)\n\t\tconsole.log(props)\n\t\titemCopy.text = props.text\n\t\titemCopy.type = props.type\n\t\titemCopy.src = props.src\n\t\tconsole.log(props.imageSizes.width)\n\t\titemCopy.style = {width: props.imageSizes.width + props.imageSizes.magnitude, height: props.imageSizes.width + props.imageSizes.magnitude}\n\t\tconsole.log(itemCopy.style)\n\t\t// itemCopy.style.width = props.imageSizes.width + props.imageSizes.magnitude\n\t\t// itemCopy.style.height = props.imageSizes.height + props.imageSizes.magnitude\n\t\tprops.content.push(itemCopy)\n\t\tprops.setEditCount(props.editCount + 1)\n\t}, [props.applyCount])\n\n\treturn (\n\t\t<>\n\t\t\t<div onClick={addImage} className=\"dropdown\">\n\t\t\t\tAdd {props.text}\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default AddImage","/home/a/Documents/GitHub/web-maker/src/ModalImage.tsx",["143","144"],"import React, { useEffect, useState } from 'react';\nimport ModalImageSizeTabel from './ModalImageSizeTable'\n\n\n/* <FontAwesomeIcon icon={faPlusSquare} style={{ width: \"\" }} onClick={props.addToDivCount} className={props.previewMode ? \"previewMode\" : \"\"} /> */\nconst ModalImage = (props: any) => {\n\treturn (\n\t\t<div className=\"imageModalContainer\">\n\t\t\t<div className={`overlay addImageOverlay ${props.addImageOverlayActive ? \"overlayActive addImageOverlayActive\" : \"\"}`} onClick={() => props.setAddImageOverlayActive(false)}></div>\n\t\t\t<div className={`addImageModal editModal ${props.addImageOverlayActive ? \"editModalActive\" : \"\"}`}>\n\t\t\t\t<h2 className=\"addImageModalHeader\"> Add your image url </h2>\n\t\t\t\t<input type=\"text\" className={`input ${props.previewMode ? \"previewMode\" : \"\"}`} value={props.imageSrc} placeholder=\"https:you-image-url\" onChange={(e: any) => props.setImageSrc(e.target.value)}  ></input>\n\t\t\t\t<div className=\"imageModalInformationDiv\"> Select your image messurement, if you image is already good leave everything blank</div>\n\t\t\t\t<div className=\"imageModalSizeInputContainer\">\n\t\t\t\t\t<ModalImageSizeTabel imageSizes={props.imageSizes} />\n\t\t\t\t</div>\n\t\t\t\t<button className=\"preview addImageModalButton\" onClick={() => {\n\t\t\t\t\tprops.setAddImageOverlayActive(false)\n\t\t\t\t\tprops.setApplyCount(props.applyCount + 1)\n\t\t\t\t}}> Apply </button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n\nexport default ModalImage;\n","/home/a/Documents/GitHub/web-maker/src/ModalImageSizeTable.tsx",["145","146","147"],"import React, { useEffect, useState } from 'react';\n\nconst ModalImageSizeTable = (props: any) => {\n\tconst [numberInputValue, setNumberInputValue] = useState({input1: \"\", input2: \"\"})\n\tconst handleNumberInput1 = (event: any) => {\n\t\tsetNumberInputValue(event.target.value)\n\t\tprops.imageSizes.width = 1\n\t} \n\n\treturn (\n\t\t<table className=\"imageModalTable\">\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<div> Select magnitude </div>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<select onChange={(e: any) => props.imageSizes.magnitude = e.target.value} className=\"preview imageModalSelect\">\n\t\t\t\t\t\t<option value=\"\"></option>\n\t\t\t\t\t\t<option value=\"%\"> Percentage </option>\n\t\t\t\t\t\t<option value=\"px\"> Pixel </option>\n\t\t\t\t\t</select>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr className=\"imageModalTable\">\n\t\t\t\t<td>\n\t\t\t\t\t<span> Width </span>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<input type=\"number\" onChange={(e: any) => props.imageSizes.width = e.target.value} placeholder=\"Desired Image width\" className=\"preview\"></input>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<span> Height </span>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<input type=\"number\" placeholder=\"Desired Image width\" onChange={(e: any) => props.imageSizes.height = e.target.value} className=\"preview\"></input>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t);\n}\n\n\nexport default ModalImageSizeTable;\n",{"ruleId":"148","severity":1,"message":"149","line":6,"column":8,"nodeType":"150","messageId":"151","endLine":6,"endColumn":20},{"ruleId":"148","severity":1,"message":"152","line":19,"column":10,"nodeType":"150","messageId":"151","endLine":19,"endColumn":14},{"ruleId":"148","severity":1,"message":"153","line":19,"column":16,"nodeType":"150","messageId":"151","endLine":19,"endColumn":23},{"ruleId":"148","severity":1,"message":"154","line":21,"column":10,"nodeType":"150","messageId":"151","endLine":21,"endColumn":20},{"ruleId":"155","severity":1,"message":"156","line":31,"column":9,"nodeType":"150","messageId":"157","endLine":31,"endColumn":17},{"ruleId":"148","severity":1,"message":"158","line":40,"column":9,"nodeType":"150","messageId":"151","endLine":40,"endColumn":18},{"ruleId":"148","severity":1,"message":"159","line":60,"column":9,"nodeType":"150","messageId":"151","endLine":60,"endColumn":17},{"ruleId":"148","severity":1,"message":"160","line":64,"column":9,"nodeType":"150","messageId":"151","endLine":64,"endColumn":22},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"148","severity":1,"message":"165","line":1,"column":8,"nodeType":"150","messageId":"151","endLine":1,"endColumn":13},{"ruleId":"148","severity":1,"message":"166","line":1,"column":16,"nodeType":"150","messageId":"151","endLine":1,"endColumn":24},{"ruleId":"148","severity":1,"message":"167","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"161","replacedBy":"168"},{"ruleId":"163","replacedBy":"169"},{"ruleId":"148","severity":1,"message":"170","line":2,"column":8,"nodeType":"150","messageId":"151","endLine":2,"endColumn":20},{"ruleId":"148","severity":1,"message":"166","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":25},{"ruleId":"148","severity":1,"message":"171","line":3,"column":8,"nodeType":"150","messageId":"151","endLine":3,"endColumn":11},{"ruleId":"172","severity":1,"message":"173","line":12,"column":13,"nodeType":"174","messageId":"175","endLine":12,"endColumn":15},{"ruleId":"176","severity":1,"message":"177","line":12,"column":24,"nodeType":"178","endLine":12,"endColumn":69},{"ruleId":"172","severity":1,"message":"179","line":30,"column":25,"nodeType":"174","messageId":"175","endLine":30,"endColumn":27},{"ruleId":"172","severity":1,"message":"179","line":30,"column":44,"nodeType":"174","messageId":"175","endLine":30,"endColumn":46},{"ruleId":"148","severity":1,"message":"166","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":25},{"ruleId":"148","severity":1,"message":"180","line":2,"column":8,"nodeType":"150","messageId":"151","endLine":2,"endColumn":21},{"ruleId":"172","severity":1,"message":"173","line":11,"column":13,"nodeType":"174","messageId":"175","endLine":11,"endColumn":15},{"ruleId":"172","severity":1,"message":"173","line":11,"column":74,"nodeType":"174","messageId":"175","endLine":11,"endColumn":76},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"148","severity":1,"message":"166","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":25},{"ruleId":"148","severity":1,"message":"166","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":25},{"ruleId":"148","severity":1,"message":"167","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"166","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":36},{"ruleId":"148","severity":1,"message":"181","line":3,"column":10,"nodeType":"150","messageId":"151","endLine":3,"endColumn":23},{"ruleId":"148","severity":1,"message":"182","line":3,"column":25,"nodeType":"150","messageId":"151","endLine":3,"endColumn":39},{"ruleId":"148","severity":1,"message":"183","line":3,"column":41,"nodeType":"150","messageId":"151","endLine":3,"endColumn":52},{"ruleId":"148","severity":1,"message":"184","line":3,"column":54,"nodeType":"150","messageId":"151","endLine":3,"endColumn":66},{"ruleId":"172","severity":1,"message":"173","line":12,"column":75,"nodeType":"174","messageId":"175","endLine":12,"endColumn":77},{"ruleId":"148","severity":1,"message":"167","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"166","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":36},{"ruleId":"148","severity":1,"message":"185","line":2,"column":10,"nodeType":"150","messageId":"151","endLine":2,"endColumn":25},{"ruleId":"148","severity":1,"message":"186","line":5,"column":10,"nodeType":"150","messageId":"151","endLine":5,"endColumn":24},{"ruleId":"172","severity":1,"message":"173","line":19,"column":49,"nodeType":"174","messageId":"175","endLine":19,"endColumn":51},{"ruleId":"187","severity":1,"message":"188","line":25,"column":5,"nodeType":"189","endLine":25,"endColumn":29,"suggestions":"190"},{"ruleId":"148","severity":1,"message":"166","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":36},{"ruleId":"172","severity":1,"message":"173","line":10,"column":24,"nodeType":"174","messageId":"175","endLine":10,"endColumn":26},{"ruleId":"187","severity":1,"message":"191","line":28,"column":5,"nodeType":"189","endLine":28,"endColumn":23,"suggestions":"192"},{"ruleId":"148","severity":1,"message":"167","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"166","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":36},{"ruleId":"148","severity":1,"message":"167","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"193","line":4,"column":9,"nodeType":"150","messageId":"151","endLine":4,"endColumn":25},{"ruleId":"148","severity":1,"message":"194","line":5,"column":8,"nodeType":"150","messageId":"151","endLine":5,"endColumn":26},"@typescript-eslint/no-unused-vars","'DropdownMenu' is defined but never used.","Identifier","unusedVar","'html' is assigned a value but never used.","'setHtml' is assigned a value but never used.","'savedIndex' is assigned a value but never used.","@typescript-eslint/no-redeclare","'newArray' is already defined.","redeclared","'handleDiv' is assigned a value but never used.","'logStyle' is assigned a value but never used.","'handlePreview' is assigned a value but never used.","no-native-reassign",["195"],"no-negated-in-lhs",["196"],"'react' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.",["195"],["196"],"'DropdownItem' is defined but never used.","'App' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","Expected '!==' and instead saw '!='.","'RenderContent' is defined but never used.","'faAlignCenter' is defined but never used.","'faAlignJustify' is defined but never used.","'faAlignLeft' is defined but never used.","'faAlignRight' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'preProcessFile' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.on', 'props.propertyToToggle', and 'props.savedStyle'. Either include them or remove the dependency array.","ArrayExpression",["197"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["198"],"'numberInputValue' is assigned a value but never used.","'handleNumberInput1' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},"Update the dependencies array to be: [props.modalStateActive, props.on, props.propertyToToggle, props.savedStyle]",{"range":"203","text":"204"},"Update the dependencies array to be: [props, props.applyCount]",{"range":"205","text":"206"},[560,584],"[props.modalStateActive, props.on, props.propertyToToggle, props.savedStyle]",[936,954],"[props, props.applyCount]"]